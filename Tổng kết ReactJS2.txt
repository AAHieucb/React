# Xử lý ảnh
Import ảnh nên dùng svg có thể custom style thay vì ảnh tĩnh bth. Ít dùng ảnh gif thôi.
Mấy cái hình hay hiệu ứng phức tạp nếu có thể hãy tạo bằng design thay vì code.

-> User input ảnh có thể kích thước cực to: có thể cho họ cut ảnh kiểu avatar, hoặc chủ động cut và lấy center theo tỉ lệ khung hiển thị.
Ảnh nặng có thể lag khi render thì nên nén nhỏ lại, nén ở server or dùng web worker xử lý canvas ở FE.
User post quá nhiều ảnh nặng lên server thì server nên xoá ảnh cũ để tránh quá tải. Có thể xoá luôn hoặc mark needDeleted và dùng cronjob xoá.

-> 3 vấn đề: loading lazy image, placeholder khi loading và error, custom hiệu ứng 
Khi ảnh nặng, browser mặc định load từ trên xuống từ từ, có thể custom hiệu ứng cho đẹp hơn. 

Khoảng trắng lúc chưa tải ảnh nặng xong phải dùng placeholder mà che lại. Có thể dùng onError và onLoad để bắt.
VD dựng placeholder cho ảnh bằng cách set kích thước cho thẻ div bao ngoài: <Box style={{width: "300px", height: "300px"}}> <img width="100%"/> </Box>

--> requestIdleCallback: hàm JS giúp thực hiện điều gì khi event loop rảnh k có task.
react-idle-timer*: lib giúp dùng requestIdleCallback trong React. VD có thể load ảnh nặng, tải data nặng chưa cần dùng ngay nếu rảnh.

--> react-progressive-graceful-image*: loading lazy, placeholder, custom hiệu ứng
react-lazy-load-image-component: thêm loading='lazy' cho tag image và custom hiệu ứng khi hiện ảnh. 



# Dùng font chữ
Cài font: yarn add @fontsource/roboto; import "@fontsource/roboto"; => dùng với font-family: "Roboto"

Thêm google font API CDN trong public/index.html, phải link cả các font-size và font-weight mới set css được. 
VD: <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@200;300;400;600&display=swap" rel="stylesheet"> => Set được font-weight: 200, 300, 400, 600. Các size khác sẽ k có tác dụng

Import font file trực tiép vào rồi định nghĩa trong file css với @font-face



# CSS Reset cho 1 dự án React bth
-> Các thuộc tính chung:
*{
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
html{
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-smooth: always;
  height: 100%;
  width: 100%;
  overflow-y: scroll;
}
body{
  height: 100%;
  width: 100%;
}
:root{
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif; // => Font-family default của OS, nếu có 1 font dùng global chắc chắn tồn tại thì viết thêm vào đầu là được.
  text-rendering: optimizeLegibility;
}
#root{
  width: 100%;
  height: 100%;
  -webkit-touch-callout: none;
}

-> Các thuộc tính khác, đôi khi buộc phải set vì các thư viện nó thay đổi làm nó hỏng:
img{
  user-select: none;
  -webkit-user-drag: none;
}
a{
  text-decoration: none;
}
button{
  text-transform: none;
  cursor: pointer;
}
button:disabled{
  cursor: not-allowed;
}
Thẻ canvas cũng cản bôi đen và drag giống img
body dùng color-scheme light hay dark tùy
set thêm transition cho :root là (transition: all 0.5s linear;) vì lúc nào ta cũng muốn có 1 chút transition khi chuyển động

-> Có thể custom để quá màn hình thì k có thanh scroll nhưng vẫn có chức năng scroll. Nếu ta cần trong những website ngắn thì user nên scroll thay vì dịch đến vị trí luôn:
body {
  -ms-overflow-style: none;
  scrollbar-width: none;
}
body::-webkit-scrollbar {
  display: none;
}

-> Nếu muốn chiều dài page chuẩn màn hình hiện tại và hiển thị header và footer đúng. Set thẻ content chính với: minHeight="calc(100vh - chiều cao header - chiều cao footer)"
-> Dùng lib sanitize.css > normalize.css



# Lazy loading 
Code splitting: Vào web thì browser tải từng file html css js về. Với React thì bundle lại thành bundle.js mới gửi tới trình duyệt. Nếu dự án lớn sẽ khiến file bundle to ra mà mỗi lần vào tải cả cục rất lâu. Code splitting là kỹ thuật tách ứng dụng 2 phần: chỉ load phần bundle cần thiết để khởi động, các phần khác sẽ load sau khi ứng dụng chạy.

1) Dynamic import: import là 1 promise, khi nào dùng mới tải về. Vd khi render thực sự 1 component ra mới load file bundle chứa component về.
Bth React optimize mọi module thành các file bundle.js, nhưng khi dùng dynamic import, các phần đó sẽ được React tách riêng ra k cho vào file bundle chung. Hđ với cả CSR SSR
Browser tự tối ưu n lần dynamic import sẽ chỉ tải 1 lần file js đó. Nếu vừa import bth, vừa dynamic import thì nó import bth xong sẽ k import lại gì nữa.
2) Lazy loading: y hệt, dùng để load cả 1 file component trong React. Kết hợp Suspense
=> Code spliting chỉ hiệu quả nếu split được các file lớn nên lazy loading được dùng nhiều. Còn dynamic import ít dùng hơn, VD khi cần import cả 1 thư viện lớn chẳng hạn.



# Dùng web worker
Web worker tận dụng chip đa nhân trên máy client luôn. K nên lạm dụng mà thêm khoảng 2-3 workers là ok => Nên dùng khi xử lý ảnh, canvas drawing, export CSV or excel file lớn
Dùng lib @shopify/react-web-worker => bỏ lib cũ @koale/useworker 
Vd: sort 500000 phần tử bằng bubble sort trong react sẽ block ui. Mở tab performance của browser sẽ thấy CPU 100%, nếu chạy nó trên 1 thread riêng, thời gian vẫn thế nhưng CPU thấp và k bị block



# Tối ưu render list lớn
C1: Virtualize long list: Dùng react-window* or react-virtualized chỉ show phần DOM visible. Kết hợp scroll down to load more
C2: Dùng phân trang kiểu bấm số chuyển pages



# Dùng React portal
Giúp render UI nằm ngoài component tree. VD modal, tooltip. Các thư viện toàn dùng ReactPortal cho các tính năng đó.
-> react-reverse-portal* giúp tạo các cổng chuyển component tới đủ mọi nơi trong dự án trong component tree.



# SEO trong React
Để check 1 website dùng CSR hay SSR chỉ cần CTRL+U. 
Cơ chế: Google bot có 1 crawl queue chứa mọi url cần đánh chỉ mục, lần lượt lấy ra và parse HTML. R phân tích xem có cần exec JS k, nếu có thì nó lại thêm cái URL của JS vào render queue (render queue chưa url js, crawl queue chứa url html). Trình renderer lại exec JS để hiển thị trang. Nó gửi HTML được render ra từ JS trở lại crawl queue. Cứ thế lấy mọi thẻ a xử lý và cho vào crawl queue html. Khi mọi html được xử lý, bot dựa vào các thông tin trích xuất ra để đánh chỉ mục cho nội dung.
Do exec JS tốn kém nên google bot ưu tiên parse html ngay và chạy JS sau, nếu request lâu thì có thể crawler sẽ k thấy. Tức web lớn và dùng nhiều JS để hiển thị thì bot có thể đọc ít nội dung hơn từ trang đó. Vì CSR cần request API xong mới có nội dung hiển thị, bot đánh giá thời gian tải lâu cũng sẽ xếp hạng thấp hơn

Google Tag Manager: quản lý website, chỉnh thẻ meta, theo dõi các sự kiện trên trang như click chuột, tích hợp Google Analytics đo lường, Google Ads.
Chỉ cần tạo tài khoản rồi nhận được 1 url thì cắm vào index.html, r mở tool của nó để theo dõi thôi.

-> Dùng React Helmet update thẻ metadata ở từng router, viết các thẻ metadata có giá trị mặc định ở mọi route trong index.html. Or làm thủ công set meta tag cho document
Crawler exec code JS có thể thấy metadata đổi được set bởi React Helmet. 
Vd share web cho telegram thì nó fetch lấy title và ảnh trong html chứ k exec JS nên sẽ thấy giống nhau ở mọi route.

-> Thêm descriptive text với mọi thẻ nếu có thể. Dùng cấu trúc url ngắn và descriptive
Nên dùng CDN để cung css, js, font chữ để giảm thời gian tải
Hạn chế lỗi để nội dung ẩn sau form login, kể cả chưa login cũng phải thấy gì đó. 

-> File robots.txt: xác định phần nào nên và k nên thu thập dữ liệu, nằm cùng cấp thư mục gốc của dữ liệu => thường để default
Nếu googlebot k tìm thấy robots.txt vẫn sẽ thu thập dữ liệu bth. robots.txt có thể setup cản crawler

-> Giải pháp khác
1) Prerendering cho SEO
Ta có thể dùng proxy kiểu nginx để check:
$http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp"
or
map $http_user_agent $limit_bots {
     default 0;
     ~*(google|bing|yandex|msnbot) 1;
     ~*(AltaVista|Googlebot|Slurp|BlackWidow|Bot|ChinaClaw|Custo|DISCo|Download|Demon|eCatch|EirGrabber|EmailSiphon|EmailWolf|SuperHTTP|Surfbot|WebWhacker) 1;
     ~*(Express|WebPictures|ExtractorPro|EyeNetIE|FlashGet|GetRight|GetWeb!|Go!Zilla|Go-Ahead-Got-It|GrabNet|Grafula|HMView|Go!Zilla|Go-Ahead-Got-It) 1;
     ~*(rafula|HMView|HTTrack|Stripper|Sucker|Indy|InterGET|Ninja|JetCar|Spider|larbin|LeechFTP|Downloader|tool|Navroad|NearSite|NetAnts|tAkeOut|WWWOFFLE) 1;
     ~*(GrabNet|NetSpider|Vampire|NetZIP|Octopus|Offline|PageGrabber|Foto|pavuk|pcBrowser|RealDownload|ReGet|SiteSnagger|SmartDownload|SuperBot|WebSpider) 1;
     ~*(Teleport|VoidEYE|Collector|WebAuto|WebCopier|WebFetch|WebGo|WebLeacher|WebReaper|WebSauger|eXtractor|Quester|WebStripper|WebZIP|Wget|Widow|Zeus) 1;
     ~*(Twengabot|htmlparser|libwww|Python|perl|urllib|scan|Curl|email|PycURL|Pyth|PyQ|WebCollector|WebCopy|webcraw) 1;
 } 
location / {
  if ($limit_bots = 1) {
    return 301 $scheme://domain.com$request_uri;
  }
}
=> Tức nếu request đến từ client bth thì show web react. Nếu đến từ bot crawler thì ta redirect đến 1 cache server trả ra data SSR tối ưu SEO => ít dùng
Prerendering có nhiều kiểu như sử dụng các dịch vụ SaaS, or thư viện Prerender.io, Prerender.cloud, SEO.js, BromBone

2) Dùng isomorphic (hay universal) với React
Là dùng component render bởi cả server và client. React có hỗ trợ SSR, ta để server render component, gửi cho client hydrate lại. React có sẵn hàm createServer và hydrate
VD: React Redux Universal, AfterJS, Goldpage là các framework hỗ trợ, thế thà dùng mẹ nextjs gatsby cho xong.



# Dùng webpack
refer tới "Projects / Setup / setup react thủ công với webpack"

-> npm run eject => Lệnh 1 chiều k dùng tuỳ tiện, làm cho bundler không còn tự động hóa mọi vấn đề nữa mà sẽ bung toàn bộ config để những dev có thể config lại tuỳ ý. 

-> Lỗi: npm run build dự án react ra file index.html nhưng khi vào chỉ có 1 trang trắng. NN vì webpack config bản production thì build vào path "/" tức absolute tìm trong application chứ kp trong application/build. 
=> Fix bằng cách thêm vào package json "homepage":"." để chỉ định tải các file static của dự án với url là relative trong thư mục hiện tại là application/build
VD: custom "homepage": "./test", thì nhét thư mục static vào folder test cùng cấp là lại chạy được



# Dùng react-router-dom v6
Đổi router url nhưng vẫn là SPA. Có thể làm thủ công với window.history của JS thuần
Switch của v5 check route từ trên xuống đúng là dừng luôn, Routes v6 sẽ luôn chọn path đúng nhất nên k cần qt thứ tự nữa
Có thể dùng url làm global store lưu data, tạo 1 hook get, set, listen thay đổi

-> Có thể tạo: nested route, default route, index route, dynamic route. Vd route not found:
<Routes>
  <Route path='/' element={<Dashboard />} />
  <Route path='*' element={<NotFound />} />
</Routes>

-> useNavigate: sẽ k hoạt động nếu component chứa nó chưa render xong
VD: navigate('/home', {replace: true}); => Dùng replace sẽ k lưu lại vào lịch sử trình duyệt, k thể back lại page trước.

-> VD với component <NavLink/> sytle:
className={({ isActive }) => (isActive ? "navLink activeLink" : "navLink")}
style={{ isActive } => ({ color: isActive ? '#fff' : '' })}

-> Listen sự thay đổi của url: có thể dùng lib "history" createBrowserHistory để lấy ra 1 object có khả năng listen, nhiều pp khác



# Dùng redux
Redux là flux đơn giản dựa trên kiến trúc ELM, chính là cách dùng dispatcher, actions, controller, stores để bắt actions và xử lý
Luồng: thực hiện hành động trên view -> tạo action -> dispatcher dispatch action tới stores -> stores có middeware và reducer, middleware sẽ dispatch actions mới hoặc báo lỗi nếu cần, reducer xử lý actions và cho state đầu ra là copy -> state lưu vào store và trả ra cho view provider -> mapStateToProps chuyển state thành props của component

-> Dùng redux-logger

-> Custom hook useAsync: nhận 1 hàm trả ra object có pending, error, data. Gọi hàm call, khi đang gọi thì pending true, khi gọi xong thì có data, nếu có lỗi thì lấy error
=> useAsync hay thế được redux thunk. Còn redux saga cung nhiều hàm rất mạnh khác như takeEvery, takeLeading, takeLastest.
=> Bh nên dùng react-query cho async state. Còn useAsync, saga, thunk chỉ dùng cho global store k cần fetch API

-> Redux saga chuyên xử lý side effect cho redux
Luồng: view -> dispatch actions -> middleware -> reducer -> state mới -> quay về view
                                      |          /^
                                      API -> done
Dispatcher dispatch action sẽ được xử lý đồng thời, 1 phần đưa action vào reducers xử lý loading và show ra, 1 phần được saga ở middleware xử lý call api lâu hơn. Saga xử lý xong thì dispatch 1 action đến reducers xử lý kết quả thành công hay thất bại.
Kiểm soát dispatch action tùy biến: takeLastest, takeLeading, takeEvery, call, put, all, delay, put, take, select, putResolve, race, fork, spawn

-> redux-toolkit: có sẵn nanoid sinh số random
Cách chuẩn nhất là dùng createSlice với createAsyncThunk (unwrap và rejectWithValue), extraReducer, createDraftSelector

--> Dùng createSlice:
Reducers thường được chia từng module riêng. VD redux thuần: const context = 'module1'; const 'ACTION_01' = `${context}_ACTION_01`; => Nhìn tên action là biết module nào
redux-toolkit xử lý điều này với createSlice. Nó tạo ra 1 slice ngắn gọn chứa luôn reducer và action. VD trong 1 module counter:
const counterSlice = createSlice({
  name: 'counter',
  reducers: {
    increment: state => state.count += 1,
    decrement: state => state.count -= 1
  }
}); export const { increment, decrement } = counterSlice.actions; export default counterSlice.reducer;
=> Sinh ra 2 action có types là counter/increment và counter/decrement và @@INIT mặc định. Export ra action và reducer.
=> Mỗi module của ứng dụng nên là 1 slice riêng. Nếu reducer muốn bắt action khác module thì phải dùng đến extraReducers

---> Dùng createReducer hay extraReducers bên trong createSlice có 2 cú pháp: 
1) { [<action> / <action>.type / <action>.toString()]: (state, action) => ({ <đổi state> }) }
2) C1 là basic, nếu dùng thêm tính năng thì: (builder) => builder.addCase(<action>, (state, action) => ({ <đổi state> }))
Dùng addMatcher khi nhiều action type chung 1 xử lý. VD:
const isErrorAction = (action) => action.type.endsWith('FAIL');
const reducer = createReducer(initState, (builder) => {
  builder
    .addMatcher(isErrorAction, (state, action) => { state.errors = action.payload.errors; state.loading = false; })
    .addDefaultCase((state, action) => {})
})

--> const store = configureStore({reducer: rootReducer, middleware: (getDefaultMiddleware) => getDefaultMiddleware({serializableCheck: false}).concat(customMiddleware)})

--> useSelector của react-redux: lấy data từ redux và tiền xử lý. Dùng kèm ?. mọi lúc vì fetch chưa xong sẽ k có data.
createSelector giống lib "reselect" tối ưu hơn vì check tham số cũ khác tham số mới về giá trị thì mới chạy lại hàm
createDraftSafeSelector tương tự nhưng đảm bảo dùng immutable trong selector an toàn mà k đổi state redux và k cần copy data. Nó bắt sự thay đổi trực tiếp trong qúa trình. VD trong reducer dùng createSelector không đổi gì, dùng createDraftSafeSelector thì sẽ đổi luôn => luôn dùng thay createSelector

--> VD dùng redux-toolkit:
TH1: 
 slice: export const {<hàm>} = slice.actions;
 component: import { <hàm> } from "...slice"; -> dp(<hàm>)
TH2:
 slice: export const selectSlice = (state) => state.slice;
 component: const <att> = useSelector((state) => selectSlice(state).<att>);
TH3: 
 slice: tạo selectSlice như TH2 -> export const selectAtt = createDraftSafeSelector(state => selectSlice(state).<att>, (att) => { <xử lý các att.data> return {..} })
 component: let {data1, data2} = useSelector((state) => selectAtt(state));
TH4: tương tự TH3 nhưng xử lý từ nhiều thuộc tính của state
 slice: export const selectAtt = createDraftSafeSelecto(selectSlice, (slice) => { <xử lý mọi thuộc tính của slice.data> return {}});
TH5: các hàm fetch dữ liệu
 slice: export const fetchData = createAsyncThunk("<tên>", async(data, thunkAPI) => { await <gọi hàm bất đồng bộ>; return res; }) -> trong extraReducers xử lý [fetchData.fulfilled/pending/rejected](state,action) {state.data = action.payload.data;}
 component: import fetchData from "..";
=> TH5 có thể kết hợp Axios và Promise.all([thunkAPI.dispatch(function1(A)), thunkAPI.dispatch(function2(B))]);



# Dùng responsive
VD cần ẩn 1 nút bấm nếu là mobile, màn hình to thì show bth => có thể dùng css thuần cho display none thẻ đó or dùng code JSX check if else có render ra hay không

-> Dùng @media hoặc cách riêng của thư viện UI
-> Dùng lib react-device-detect
-> Tự tạo 1 hook useDevice trả ra các biến phục vụ lấy kích thước màn hình hiện tại => best practice
-> 

//!!!!!!!!!
??? Thiếu container query và video trong youtube


