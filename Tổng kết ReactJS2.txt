# Xử lý ảnh
Ưu tiên dùng svg có thể custom style thay vì ảnh tĩnh. Hạn chế ảnh gif.
Nên lazy loading image khi cần thiết
Dùng placeholder hiện đầu tiên thay vì khoảng trắng khi chưa tải ảnh xong. Placeholder có thể là 1 màu xám hoặc 1 ảnh base64 default. Chú ý khi thuộc tính src không tồn tại thì k hiện gì mà cũng k báo lỗi, thì vẫn hiện placeholder.
Rồi ảnh blur tải trước đè lên. Rồi ảnh thật đè lên blur. Nếu error thì ảnh error đè lên hết. Xử lý với onError, onLoad.

-> Khi cho user input ảnh, kích thước có thể cực lớn.
- Nếu ảnh kiểu avatar có thể giới hạn kích thước cho họ cut ảnh. Ảnh lưu ở server cũng nên được nén hiển thị vừa khung.
- Nếu FE cần render ảnh nặng thì nên dùng web worker xử lý canvas tránh lag.
- Ảnh ở server nên có cơ chế tự xoá ảnh cũ bằng cronjob hoặc implement xoá ảnh khi post ảnh mới.

-> requestIdleCallback: 1 hàm JS đb giúp thực hiện điều gì khi event loop rảnh k có task.
react-idle-timer*: lib của react giúp dùng requestIdleCallback trong React. VD có thể load ảnh nặng, defer tải data nặng chưa cần dùng ngay.

-> react-lazy-load-image-component: giúp lazy loading và custom hiệu ứng hiện ảnh



# Dùng font chữ
Cài font lẻ: yarn add @fontsource/roboto; import "@fontsource/roboto"; => dùng với font-family: "Roboto"

Thêm google font API CDN trong public/index.html, font tĩnh phải link cả các font-size và font-weight mới set css được. 
VD: <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@200;300;400;600&display=swap" rel="stylesheet"> => Set được font-weight: 200, 300, 400, 600. Các size khác sẽ k có tác dụng, hoặc đổi qua variable font.

Import font file trực tiép vào rồi định nghĩa trong file css với @font-face



# Lazy loading 
Code splitting: Vào web thì browser tải từng file html css js về. Với React thì bundle lại thành bundle.js mới gửi tới trình duyệt. Nếu dự án lớn sẽ khiến file bundle to ra mà mỗi lần vào tải cả cục rất lâu. Code splitting là kỹ thuật tách ứng dụng 2 phần: chỉ load phần bundle cần thiết để khởi động, các phần khác sẽ load sau khi ứng dụng chạy. 

2 pp code splitting phổ biến:
1) Dynamic import: import là 1 promise, khi nào dùng mới tải về. Vd khi render thực sự 1 component ra mới load file bundle chứa component về.
Bth React optimize mọi module thành các file bundle.js, nhưng khi dùng dynamic import, các phần đó sẽ được React tách riêng ra k cho vào file bundle chung. Hđ với cả CSR SSR
Browser tự tối ưu n lần dynamic import sẽ chỉ tải 1 lần file js đó. Nếu vừa import bth, vừa dynamic import thì nó import bth xong sẽ k import lại gì nữa.
2) Lazy loading: y hệt, dùng để load cả 1 file component trong React. Kết hợp Suspense
Code spliting chỉ hiệu quả nếu split được các file lớn nên lazy loading được dùng nhiều. Còn dynamic import ít dùng hơn, VD khi cần import cả 1 thư viện lớn chẳng hạn.
VD: const Events = React.lazy(() => import('./Events')); <Suspense fallback={<div>Loading...</div>}><Events /></Suspense>

-> Prefetching: 
- Trong NextJS luôn tự prefetch khi dùng tag Link của nó.
- Trong React có react-router-dom có thể tìm cách prefetch 1 route.
- Trong html thuần: 
Thẻ a k hỗ trợ prefetch mà chỉ navigation. Mỗi khi navigate sẽ sang 1 trang mới hoàn toàn và tải lại mọi thứ. Mỗi page sẽ có nhiều files css js giống nhau
Có speculationrules giúp prefetch và prerender pages. 
Dùng <link rel="prefetch" href="./page2.html"> sẽ prefetch page2 vào lúc rảnh, dùng cache trong browser (user phải k disable browser cache), chỉ dùng được với same site. Khác với rel="preload" để ưu tiên tải 1 data trong page trước mọi tài nguyên khác. Vd ảnh hay thumbnail SEO dùng khi share trên tele, twitter.



# Dùng web worker
Web worker tận dụng chip đa nhân trên máy client luôn. K nên lạm dụng mà thêm khoảng 2-3 workers là ok => Nên dùng khi xử lý ảnh, canvas drawing, export CSV or excel file lớn
Dùng lib @koale/useworker => bỏ @shopify/react-web-worker
Vd: sort 500000 phần tử bằng bubble sort trong react sẽ block ui. Mở tab performance của browser sẽ thấy CPU 100%, nếu chạy nó trên 1 thread riêng, thời gian vẫn thế nhưng CPU thấp và k bị block



# Tối ưu render list lớn
Lag vì render quá nhiều DOM nodes
C1: Virtualize long list: Dùng react-window* or react-virtualized or react-viewport-list chỉ render phần DOM visible. Thường kết hợp scroll down to load more với react-infinite-scroller
C2: Dùng phân trang kiểu bấm số chuyển pages: react-paginate

-> Vd logic frontend lấy hết data về rồi tự phân trang nếu biết trước list data k quá nhiều.
const dataList;
const [page, setPage] = useState(1);
const { itemPerPage, numberOfPage } = useMemo(() => {
  if(dataList) {
    let itemPerPage = 10;
    if(isMobile) itemPerPage = 6;
    const numberOfPages = Math.ceil(dataList.length / itemPerPage);
  }
  return { itemPerPage: 0, numberOfPage: 0 };
}, [dataList, isMobile]);
useEffect(() => {
  if(dataList && page*itemPerPage > dataList.length) setPage(1);
}, [dataList, itemPerPage]);
if(!dataList || dataList.length <= 0) return <Empty/>
dataList.slice((page - 1)*itemPerPage, page*itemPerPage).map((item, idx) => (
  <ItemList key={idx}/>
))
=> Lưu biến filter search để trên URL params

-> Vd logic server xử lý phân trang db:
Request: currentPage, pageSize, otherFilter
Response: datalist, error, totalitem
=> Mất 2 query để lấy count và data 1 page.

Dùng load more thay vì phân trang thường sẽ tối ưu hơn:
Request: offset, pageSize, otherFilter
Response: dataList, error, có thể kèm nextlink
=> frontend check data.length mà nhỏ hơn limit thì k query nữa

-> Usecase: Server cần lấy lượng data lớn từ 1 db, và toàn bộ data từ 1 API, filter search cần check trên cả db và API r merge lại.
Giải pháp: cần query tới database đúng tại vị trí lần trước đó query. Server có thể gửi cho client indexitem là vị trí item cuối cùng mà nó lấy từ database, request sau lại gửi kèm cái đó để server lấy từ vị trí đó đổ lên là được.



# Dùng React portal
Giúp render UI nằm ngoài component tree. VD modal, tooltip. Các thư viện và <dialog> toàn dùng portal cho các tính năng đó.
React có sẵn hàm createPortal trong react-dom để wrap component cho tính năng đó. Cơ chế là dùng JS append DOM element vào 1 thẻ root thôi.
Lib react-reverse-portal* giúp tạo các cổng chuyển component tới đủ mọi nơi trong dự án trong component tree.



# SEO trong React => ref tới "html_css_js"
Cơ chế: Google bot có 1 crawl queue chứa mọi url cần đánh chỉ mục, lần lượt lấy ra và parse HTML. R phân tích xem có cần exec JS k, nếu có thì nó lại thêm cái URL của JS vào render queue (render queue chưa url js, crawl queue chứa url html). Trình renderer lại exec JS để hiển thị trang. Nó gửi HTML được render ra từ JS trở lại crawl queue. Cứ thế lấy mọi thẻ a xử lý và cho vào crawl queue html. Khi mọi html được xử lý, bot dựa vào các thông tin trích xuất ra để đánh chỉ mục cho nội dung.
Do exec JS tốn kém nên google bot ưu tiên parse html ngay và chạy JS sau, nếu request lâu thì có thể crawler sẽ k thấy. Tức web lớn và dùng nhiều JS để hiển thị thì bot có thể đọc ít nội dung hơn từ trang đó. Vì CSR cần request API xong mới có nội dung hiển thị, bot đánh giá thời gian tải lâu cũng sẽ xếp hạng thấp hơn

-> Google Tag Manager: quản lý website, chỉnh thẻ meta, theo dõi các sự kiện trên trang như click chuột, tích hợp Google Analytics đo lường, Google Ads.
Chỉ cần tạo tài khoản rồi nhận được 1 url thì cắm vào index.html, r mở tool của nó để theo dõi thôi.

-> Thêm descriptive text với mọi thẻ nếu có thể. Dùng cấu trúc url ngắn và descriptive
Nên dùng CDN để cung css, js, font chữ để giảm thời gian tải
Hạn chế lỗi để nội dung ẩn sau form login, kể cả chưa login cũng phải thấy gì đó. 

-> Giải pháp cải thiện SEO cho react:
1) Prerendering cho SEO
Ta có thể dùng proxy kiểu nginx để check:
$http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp"
or
map $http_user_agent $limit_bots {
     default 0;
     ~*(google|bing|yandex|msnbot) 1;
     ~*(AltaVista|Googlebot|Slurp|BlackWidow|Bot|ChinaClaw|Custo|DISCo|Download|Demon|eCatch|EirGrabber|EmailSiphon|EmailWolf|SuperHTTP|Surfbot|WebWhacker) 1;
     ~*(Express|WebPictures|ExtractorPro|EyeNetIE|FlashGet|GetRight|GetWeb!|Go!Zilla|Go-Ahead-Got-It|GrabNet|Grafula|HMView|Go!Zilla|Go-Ahead-Got-It) 1;
     ~*(rafula|HMView|HTTrack|Stripper|Sucker|Indy|InterGET|Ninja|JetCar|Spider|larbin|LeechFTP|Downloader|tool|Navroad|NearSite|NetAnts|tAkeOut|WWWOFFLE) 1;
     ~*(GrabNet|NetSpider|Vampire|NetZIP|Octopus|Offline|PageGrabber|Foto|pavuk|pcBrowser|RealDownload|ReGet|SiteSnagger|SmartDownload|SuperBot|WebSpider) 1;
     ~*(Teleport|VoidEYE|Collector|WebAuto|WebCopier|WebFetch|WebGo|WebLeacher|WebReaper|WebSauger|eXtractor|Quester|WebStripper|WebZIP|Wget|Widow|Zeus) 1;
     ~*(Twengabot|htmlparser|libwww|Python|perl|urllib|scan|Curl|email|PycURL|Pyth|PyQ|WebCollector|WebCopy|webcraw) 1;
 } 
location / {
  if ($limit_bots = 1) {
    return 301 $scheme://domain.com$request_uri;
  }
}
=> Tức nếu request đến từ client bth thì show web react. Nếu đến từ bot crawler thì ta redirect đến 1 cache server trả ra data SSR tối ưu SEO => ít dùng
Prerendering có nhiều kiểu như sử dụng các dịch vụ SaaS, or thư viện Prerender.io, Prerender.cloud, SEO.js, BromBone

2) Dùng isomorphic (hay universal) với React. Tức dùng server component của react thuần có hỗ trợ, thế thà dùng mẹ nextjs or gatsby cho nhanh.

-> Ở react19, dùng các thẻ <title> <link> <meta> dùng ở bất cứ components nào cũng sẽ tự bị chuyển lên <head>. Khai báo metadata thoải mái trong jsx luôn.
<link> tag có thêm trường precedence "high" "default" chỉ thứ tự xếp các file trong <head> vì các files css rất qtr vị trí thứ tự đặt files. Còn load file thì react19 đảm bảo 1 component có thẻ link dùng 2 nơi sẽ chỉ load 1 lần, cũng như đảm bảo file link load xong hét mới render.
Hỗ trợ <script async={true} src="..." /> đặt ở bất cứ đâu (k tự chuyển lên head).
=> thay thế hoàn toàn react helmet để đổi metadata cho web ở client side, 1 số TH vẫn có lợi cho SEO khi crawler của gg exec code JS. Vd share web cho telegram thì nó fetch lấy title và ảnh trong html chứ k exec JS nên sẽ thấy giống nhau ở mọi route.

-> React19 có preload resource:
import { prefetchDNS, preconnect, preload, preinit } from 'react-dom'
function MyComponent() {
  preinit('https://.../path/to/some/script.js', {as: 'script' }) // loads and executes this script eagerly
  preload('https://.../path/to/font.woff', { as: 'font' }) // preloads this font
  preload('https://.../path/to/stylesheet.css', { as: 'style' }) // preloads this stylesheet
  prefetchDNS('https://...') // when you may not actually request anything from this host
  preconnect('https://...') // when you will request something but aren't sure what
}
Được convert thành:
<html>
  <head>
    <link rel="prefetch-dns" href="https://...">
    <link rel="preconnect" href="https://...">
    <link rel="preload" as="font" href="https://.../path/to/font.woff">
    <link rel="preload" as="style" href="https://.../path/to/stylesheet.css">
    <script async="" src="https://.../path/to/some/script.js"></script>
  </head>
  <body>
  </body>
</html>



# Error boundary
React component ta thường k viết try catch nên có error sẽ hỏng chương trình. Nên hiện component Error thay vì sập web.
Có thể tạo SuspenseBoundary kết hợp ErrorBoundary chung 1 comp được. NextJS cho phép tạo error từng page và global-error luôn.

Trong react-router-dom cũng có <Route errorElement={}/> giúp hiển thị error element nếu path bên trong throw mà k bắt
Có lib react-error-boundary: https://dev.to/edemagbenyo/handle-errors-in-react-components-like-a-pro-l7l



//!!!!!!!!
#***Bản chất cách viết chuẩn React 18
Cả dự án chỉ dùng toàn custom hook cũng được, luôn dùng useCallback, useMemo đảm bảo mọi thứ phụ thuộc.

Bản chất state của React giải thích case đồng hồ đếm ngược:
Khi dùng useEffect và định nghĩa 1 hàm bên trong (kể cả là hàm const hay hàm trong setInterval), hàm đó là cố định giống useCallback, các tham số cũng là cố định và chỉ khởi tạo lại khi useEffect chạy lại tức dependencies đổi.

1) useEffect gọi hàm side effect, hàm đó phải nằm trong useCallback và là phụ thuộc của useEffect, vì khai báo const sẽ khởi tạo lại ở mỗi lần render.
Chú ý useCallback k đủ dependency sẽ dùng với data cũ có thể sai. 1 số ít TH buộc phải thêm // eslint-disable-line => Có cách ép chuẩn rule với useRef. VD:
const initRef = React.useRef(null);
const fetchAttempted = React.useRef(false);
React.useEffect(() => {
  initRef.current = async () => {
    if (!fetchAttempted.current) {
      if (auctionFetchingStatus !== FS.SUCCESS) {
        fetchAttempted.current = true;
        await Promise.all([dispatch(fetchAllAuction())]);
      }
    } else {
      await Promise.all([dispatch(fetchAllAuction())]);
    }
  };
}, [auctionFetchingStatus, dispatch]);
React.useEffect(() => {
  initRef.current();
}, [needRefetch]);
=> auctionFetchingStatus đổi sẽ k gọi lại hàm fetch nhưng vẫn update hàm

Nếu gọi nhiều hàm lồng nhau từ base, cứ viết custom hook lồng nhau liên tục cho đến hook base. Liên tục return các hàm useCallback => ref tới "Projects / Combinator"
Tương tự useMemo với data cấu thành từ state, nếu tái sử dụng nhiều nơi có thể cùng custom hook ở file riêng. Còn không thì khai báo const trực tiếp trong file như bth ok.

2) 1 pages fetch lại data, cách trigger 1 pages khác ở xa cũng fetch lại data:
Dùng ReactContext hoặc redux cung ra hàm refetchData. Nên viết 1 file riêng gọi hàm fetchData với type, type nào thì component pages nào cần rerender. Nên tạo thêm 1 custom hook bên trong gọi hàm fetchData kèm dependency và cung ra hàm đó 

VD: Component A update data cần component B rerender -> component A gọi hàm refetch của react context truyền vào type X -> react context check map type X thì B cần refetch nên đổi refetchB -> component B dùng custom hook gọi hàm initB có dependency là refetchB sẽ rerender. Cần viết sao cho componentB luôn refetch nếu refetchB lật bit.

Bản chất React ta nghĩ là phụ thuộc vào nhau, ví dụ component A đổi data thì component B refetch thì component B nên có data dependency là A. Nhưng trong blockchain nó éo như v, 1 component xa lắc xa lơ có thể call refetch của nhau nên k được trừ khi tất cả lưu vào redux

3) ***Bản chất***Giả sử ta click 1 button gọi 1 API độc lập, API này k phụ thuộc vào state gì cả thì liệu hàm đó có cần useCallback không? => K cần, có thể tạo file riêng or định nghĩa ngay hàm const trong component 
- Ta có thể khai báo bất cứ loại hàm gì export ở 1 file riêng và sử dụng ở mọi component khác nhau nếu nó k phụ thuộc vào state props 
- 1 hàm số được khai báo trong component nếu cần dùng state props của component đó. Khi hàm đơn giản và k phụ thuộc vào hook khác thì khai báo const. Hàm phức tạp k muốn khởi tạo lại nhiều hoặc dùng kết hợp nhiều hook khác thì dùng useCallback sẽ memoize. Hàm mà tái sử dụng ở nhiều nơi thì tách ra custom hook (or dùng các pp khác như hàm fetchReduxThunk).

TH1 hàm phụ thuộc vào hook khác, được gọi trong 1 hook khác thì hook đó phải có hàm là dependency. Hàm đó phải dùng useCallback liệt kê mọi dependency, nếu ta muốn làm kiểu setCounter(counter + 1) thì phải liệt kê counter vào dependency, môi lần gọi thì useCallback sẽ render hàm mới, useEffect có hàm là dependency sẽ chạy tiếp vì đổi counter nên sẽ gọi vô tận hàm => fix với setCounter(val => val + 1); Tức là cứ viết như vậy thì mọi hàm cần gọi hoặc là sẽ gọi đến cuối cùng là 1 hàm không còn dependency nó đổi, hoặc là hàm external klq tới state nữa
=> Custom hook chỉ là 1 cách chia tái sử dụng, k giúp được gì.

4) Các case khác:
const [test, setTest] = useState(false); => phụ thuộc vào test thì cần dependency nhưng setTest thì không
Hàm async hay không async ta đều xử lý như nhau

Với các hàm logic bình thường:
VD1:   
const debounceCallRefetchData = useCallback(
  debounce(() => { setRefetchData(false); }, 11000),
  []
);
VD2:   
const debounceCallRefetchData = debounce(() => {
  setRefetchData(false);
}, 11000);
=> Nên dùng C2 vì C1 có hàm đơn giản và k có phụ thuộc gì vào state props, chỉ dùng useCallback khi phụ thuộc vào state props hoặc là dependency của chỗ khác.

-> Dấu hiệu tách riêng component: khi cần tái sử dụng; khi 1 component mà query 2 api hiển thị 2 nơi


