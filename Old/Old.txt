
# Lib k dùng
effect: hỗ trợ code Typescript cực mạnh nên dùng nếu làm dự án Typescript yêu cầu tính chặt chẽ cao. Nó làm mọi thứ dễ dàng và dễ hiểu hơn. 
shoelace: thư viện hỗ trợ tạo web components, dùng shadow DOM cách ly không conflict với bất cứ code css js nào, tích hợp vào mọi dự án đều tương thích.
react-markdown: thư viện giúp render từ kiểu markdown ra văn bản đẹp
google-map-react: hiển thị gg map tương tác. Nó có điểm lợi là dùng google map API và dù k load được google map api nó vẫn có thể hiện map bth
react-autosuggest*: tạo autosuggest khi gõ input text, custom cực mạnh => nếu có thể hãy dùng autocomplete mặc định
whatwg-fetch: cung tính năng fetch cho cả trình duyệt cũ
immer / immutable: clone và thay đổi 1 biến const, so sánh 2 biến immutable bằng giá trị
screenfull: khiến 1 page hay 1 component nào biến thành fullscreen
react-infinite-scroll-component: tính năng scroll đến cuối sẽ fetch tiếp data hiển thị tiếp
@rjsf/core: tạo form dựa trên config json data hiển thị ra giao diện
webpack-bundle-analyzer: tool show trực quan phần nào của ứng dụng chiếm nhiều dung lượng nhất
proton-native: tool code React nhưng sinh ra ứng dụng desktop. Ứng dụng được compiled sang native platform code nên thực sự là native
react-trend: vẽ đường line
react-grid-layout: tạo grid draggable items
slick-carousel: tạo carousel slider
@ajna/pagination: cung hook chuyên dùng cho phân trang.

-> react-transition-group: giúp tạo css animation dễ hơn
react-animation-on-scroll: animation xuất hiện chỉ khi scroll tới
react-awesome-slider: chuyên tạo chuyển full page đẹp dạng slider. Custom các thuộc tính css trong https://caferati.me/demo/react-awesome-slider/fall và thêm vào class tên là awssld.

-> fireworks: thư viện tạo pháo hoa. Thg dùng kiểu ấn nút thành công thì bắn pháo hoa
react-snowfall: hiển thị mưa tuyết, custom thoải mái

-> react-moment moment: format hiển thị ngày giờ, nó cũng cung nhiều utils VD hiện ra còn bnh ngày là đến ngày nào chẳng hạn
Dùng thêm moment-timezone nếu cần thao tác thời gian theo múi giờ khác nhau

-> storybook: package giúp tách từng component, hiển thị dạng phân cấp giúp dễ theo dõi component
react-cosmos: thay thế storybook
react-styleguidist: Viết docs cho component -> dài éo dùng

-> Ít dùng:
compare-versions
public-ip
shelljs: tạo unix shell command cho nodejs
whatwg-fetch: polyfill cho window fetch



# tailwind.config.js v3:
module.exports = {
  content: ["./src/**/*.{js,ts,jsx,tsx,mdx}"],
  theme: {
    screens: {
      sm: "480px",
      md: "768px",
      lg: "976px",
      xl: "1100px",
      xxl: "1300px",
    },
    fontSize: {
      xs: '0.75rem',
      sm: '0.875rem',
      base: '1rem',
      lg: '1.125rem',
      xl: '1.25rem',
      '2xl': '1.5rem',
      '6xl': '4rem',
    },
    extend: {
      colors: {
        gray: {
          100: '#f7fafc',
          200: '#edf2f7',
          300: '#e2e8f0',
          900: '#1a202c',
        },
        pink: "#ff49db",
        "gray-dark": "#273444",
      },
    },
    keyframes: { // Các khai báo ở đây sẽ vào trực tiếp css, khai báo keyframe
      "accordion-down": {
        from: { height: 0 },
        to: { height: "var(--radix-accordion-content-height)" }
      },
      "accordion-up": {
        from: { height: "var(--radix-accordion-content-height)" },
        to: { height: 0 },
      },
      "fade-in-down": {
        "0%": {
          opacity: 0,
          transform: "translateY(-10px)"
        },
        "100%": {
          opacity: 1,
          transform: "translateY(0)"
        }
      },
    },
    animation: { // Khai báo animation theo keyframe 
      "accordion-down": "accordion-down 0.2s ease-out",
      "fade-in-down": "fade-in-down 0.2 easep-out"
    },
    borderRadius: {
      lg: "var(--radius)", // rounded-lg tương tự nhiều thuộc tính khác cũng set được
      md: "calc(var(--radius) - 2px)", // rounded-md
      sm: "calc(var(--radius) - 4px)", // rounded-sm
    },
    container: { // class name là container
      center: true,
      padding: "2rem",
      screens: { // responsive
        "2xl": 1400px,
      },
      padding: {
        DEFAULT: '1rem',
        sm: '2rem',
        lg: '4rem',
        '2xl': '6rem',
      },
    },
    colors: {
      black: '#000',
      foreground: "var(--foreground)",
      primary: {
        DEFAULT: "var(--primary)",
        foreground: "var(--primary-foreground)",
      },
      muted: { // accent, card, popover, destructive, 
        DEFAULT: "var(--muted)",
        foreground: "var(--primary-muted)",
      },
    },
  },
  prefix: "", // tiền tố cho vào các class của tailwind sau khi compile để tránh conflict với các thư viện khác nếu dùng.
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography"), require('tailwindcss-motion')],
};



# Dùng lib MUI v4
-> css selector style ở v4
Dùng makeStyles({<object>}); tạo ra hàm trả ra object các style để dùng với className. 
VD dùng với css selector:
a:{
  "&:hover": {<>}
} => khi thẻ className dùng a được hover.
a:{
  "& td": {<>}
} => thẻ tag td nằm trong thẻ className dùng a ở mọi cấp. 
a:{
  "& .a.b": {<>}
} => thẻ có cả class b và a là con mọi cấp của thẻ className dùng a
a:{
  "& > *": {<>}
} => mọi thẻ là con trực tiếp của thẻ có className dùng a
"@global":{ // thường dùng @global cho CSS Reset.
  "*": {<>},
  "#root": {<>},
  html: {<>},
  "li > div:nth-of-type(1)": {<>},
} => set global style (cấp style thấp nhất) cho mọi thẻ; set style cho thẻ có id là root; set style cho thẻ html; set style cho mọi thẻ div là con đầu tiên trực tiếp của tag li

className dùng trong makeStyles khi render HTML thì tên class nó bị đổi khác nhau ở bản dev và production. Nếu đổi style class có sẵn của MUI phải dùng css selector với dấu $:
test: {
  "& $abc": {<>}
},
abc: { },
=> thẻ className abc là con mọi cấp của thẻ class test, tên test và abc là viết trực tiếp như này trong makeStyles chứ kp tên class sau khi chuyển về html css thuần. Dù class abc k có style gì ta vẫn phải tạo nó trong makeStyles thì mới dùng được nó trong selector

-> Các cách style ở v4:
- Dùng makeStyles nhận object tạo từ createStyles
- Dùng createTheme chỉnh palette, breakpoint, override các thẻ có sẵn
- Override class có sẵn của từng thẻ với useStyles 
- withStyles(theme => ({ object các thuộc tính thay đổi cho thẻ}))(<thẻ nào>); tạo thẻ mới override style.
- Dùng style hay sx inline



# Dùng lib MUI v5
Google's Material Design, là 1 hình thức của Flat Design (thiết kế phẳng), chỉ dựa vào thay đổi màu mà mang tới cảm giác 3D như có hiệu ứng nổi lên trên giao diện.
-> Packages đi kèm: notistack, react-material-ui-carousel, @mui/x-date-pickers và date-fns => tạo input date picker

-> Custom override với provider
const theme = createTheme();
theme.typography.h3 = {
  fontSize: '1.2rem',
  '@media (min-width:600px)': {
    fontSize: '1.5rem',
  },
  [theme.breakpoints.up('md')]: {
    fontSize: '2.4rem',
  },
}; => Custom thẻ h3 dùng typography mới dùng 1.2 rem và nhỏ hơn 600px sẽ dùng 1.5rem và lớn hơn md dùng 2.4rem

Có thể custom nhiều type khác của Typography:
typography: {
  subtitle1: {
    fontSize: 12,
  },
  body1: {
    fontWeight: 500,
  },
  button: {
    fontStyle: 'italic',
  },
} => Custom được mọi loại variant

-> Dùng styled
VD truyền props vào styled: 
const CustomClass = styled(Box, {
  shouldForwardProp: (prop) => prop !== "fontWeight" && prop !== "myProp",
})(({theme, myProp, fontWeight}) => ({
  ".background": {
    fontWeight,
  }
}));
và dùng: <CustomClass fontWeight="lighter" myProp>...</CustomClass> 

-> Customize thẻ có sẵn với css selector
VD customize TextField:
".test": {
  "& div.MuiFormControl-root": {
    "& div.MuiOutlinedInput-root": {
      "& fieldset": {
        borderColor: "red"
      }
    }
  }
}
Mẹo: khi cần lấy màu dùng color: "background.primary.main" mà éo cần useTheme => chỉ được khi dùng sx

-> Dùng css selector trong styled
".A": {
  "&:hover":{}
} => hover vào A thì thẻ A hiện ra cái gì
".A": {
  "&:hover .B": {}
} => hover vào A thì class B mang css gì
".A": {
  "& .B": {
    "&:hover": {}
  }
} => B là con của A thì hover vào sẽ mang css gì
".A": {
  "& $B": {}
} => thẻ có id là B và là con mọi cấp của A mang css gì
".A": {
  "& th:last-child, & td:last-child": {
  }
} => 1 list th td là con cuối cùng của thẻ có class A sẽ có css gì
".A": {
  "&:before": {} => before selector của A có css gì
  "&:hover": {
    "&:before": {} => hover vào A thì before selector của A sẽ có css gì
  },
  "&:hover img": {}, => hover vào A thì img trong nó mang css gì
} 
-> Customize lại 1 thẻ đặt thành tên khác:
const MainLayoutContainer = styled(Box)((theme) => ({
  backgroundColor: theme.theme.palette.background.body.main,
})); 

-> Dùng TextField: Dùng textfield select hơn là dùng component Select. Thay vì dùng input type number, nên dùng type text và tự check
Xử lý invalid input: có thể dùng formik or xử lý như html, css thuần là thêm pattern:"[a-z]{1,50}" và className:"input" và input:invalid:{<css>}
VD check if e.target.value = Number(e.target.value) để tránh ký tự lạ



# Dùng react-router-dom v5
-> Switch Route BrowserRouter 
<Switch> kiểm tra từ trên xuống path nào trùng thì render 1 cái đó
<Route> xác định component nào hiện ra vs path nào. Nên để 1 path mặc định là / thì redirect tới trang nào thông qua <Redirect>
<BrowserRouter> dùng History API theo dõi lịch sử bộ định tuyến tạo url /, còn <HashRouter> sử dụng hash của URL dùng cho các trình duyệt cũ tạo url #/

-> <NavLink> hỗ trợ activeClassName là style khi url đang ấn là ở thẻ này. 
Do đó <NavLink> thường dùng cho navigation bar chuyển trực tiếp trang này, còn <Link> dùng khi mở ra 1 tab mới



# Dùng react-router-dom v6
Switch của v5 check route từ trên xuống đúng là dừng luôn, Routes v6 sẽ luôn chọn path đúng nhất nên k cần qt thứ tự nữa
-> Có thể tạo: nested route, default route, index route, dynamic route.
Vd route not found: <Routes>
  <Route path='/' element={<Dashboard />} />
  <Route path='*' element={<NotFound />} />
</Routes>

-> useNavigate: sẽ k hoạt động nếu component chứa nó chưa render xong
VD: navigate('/home', {replace: true}); => Dùng replace sẽ k lưu lại vào lịch sử trình duyệt, k thể back lại page trước.

-> VD với component <NavLink/> style:
className={({ isActive }) => (isActive ? "navLink activeLink" : "navLink")}
style={{ isActive } => ({ color: isActive ? '#fff' : '' })}

-> Listen sự thay đổi của url: k hỗ trợ trực tiếp, có thể dùng lib "history" createBrowserHistory để lấy ra 1 object có khả năng listen.



# Dùng Redux thuần
props.dispatch, mapStateToProps, Redux.createStore, ReactRedux.connect, ReactRedux.Provider, Redux.bindActionCreators, Redux.applyMiddleware, mapDispatchToProps, store.dispatch, Redux.combineReducers, store.getState, Redux.compose, mergeProps, window.__REDUX_DEVTOOLS_EXTENSION__ (devtool browser)



# React class component
-> Component Life Cycle (no error handling):
ReactDOM.render() --> <tên class>.defaultProps = {}
   ^                               |
   |                               v
   |                       this.state = {}
   |                               |
   |                               v                         
   |               static getDerivedStateFromProps(nextprops, prevstate){return({})} --> shouldComponentUpdate(nextProps, nextState){}
   |                               |                 ^                                                |
   |                               v                 |                                                v
   |                            render()             |                                             render()
   |                               |                 |                                                |
   |                               v                 |                                                v
   |                   componentDidMount(){} --> this.setState({})                     getSnapshotBeforeUpdate(prevProps, prevState){}
   |                               |                 ^                                                |
   |                               v                 |                                                v
componentWillUnmount()         <xử lý> -------------   ---------------------<---- componentDidUpdate(prevProps, prevState, snapshot){}
   ^                                |
   |                                v
   ---------------   ReactDOM.unmountComponentAtNode(element)



## Web3
# Các loại request của ethereum
wallet_watchAsset -> thêm loại token mới vào ví
eth_requestAccounts -> unlock ví và connect tk vơi website
wallet_addEthereumChain -> thêm chain mới và gọi switch, nếu chain mới tồn tại rồi thì chỉ gọi switch
wallet_switchEthereumChain -> đổi chain
wallet_requestPermissions -> connect ví vào website
wallet_getPermissions -> check xem đã connect hay chưa
eth_getEncryptionPublicKey -> lấy encryption key
eth_decrypt -> decrypt thứ được encrypt với encryption key
eth_sign -> dùng eth sign
personal_sign -> dùng personal sign
personal_ecRecover -> recover lại address từ message của personal_sign
eth_signTypedData -> Dùng Sign Typed Data
eth_signTypedData_v3 -> Dùng Sign Typed Data v3
eth_signTypedData_v4 -> Dùng Sign Typed Data v4

-> Thư viện code web3:
ethereum-multicall: giúp tạo multicall mà ta kp tự deploy 1 contract multicall riêng nữa
wagmi rainbowkit: connect ví và dùng ethereum hook 
eth-cli: giúp sinh cặp piv/pub key. Gõ vào terminal "eth address:random"

-> Xây page thống kê
Khi thống kê data của 1 user nào đó thì cần dùng Sign Message để xác thực.
Khi cần thống kê thì làm API từ server riêng, server này sẽ tự fetch API từ blockchain về và ta query vào đó, server có thể xử lý bằng nhiều cách: 
- Nếu data k cần update thời gian thực thì cứ viết script tự động fetch sau 1 ktg cố định
- Nếu data cần update theo thời gian thực thì viết subscribe sự kiện, bắt event mất kết nối thì tự kết nối lại
- Nếu data lớn và ta cần lấy lại tất cả từ block đầu tiên đến hiện tại và tiếp tục bắt thì có thể dùng The Graph hoặc tạo 1 server tương tự
- Nếu data đơn giản thì gọi trực tiép vàp contract hoặc tìm API bên thứ 3.


