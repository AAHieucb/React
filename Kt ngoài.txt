//!!!!!!
# Authorization và authentication
Authen để biết ai đó hợp lệ và authorization để phân quyền tài nguyên họ được truy cập. Các kiểu login:
Dùng bên thứ 3 như google, facebook, github nhận về 1 credential và dùng nó này để login các website liên quan.
Login bằng tk mk jsonwebtoken cho 1 app đơn lẻ
Single sign-on (SSO) login vào portal của hệ thống là vào được mọi ứng dụng bên trong.

-> SSO dùng cho hệ thống lớn nhiều ứng dụng con, chỉ cần quản lý authen của user trong 1 single database chứ kp mỗi web 1 database, phân quyền để vào được hệ thống con.
3 protocol hỗ trợ SSO phổ biến nhất:
1) OpenId Connect: Là chuẩn để authentication. VD Google là 1 OpenID identity provider, cung cho 1 người thì người này có thể login bất cứ website nào chấp nhận xác thực bằng OpenID như Youtube, Okta,.. Còn Facebook trước đây dùng OpenID nhưng nay đã chuyển qua Facebook Connect. 
VD có thể dùng firebase tạo OpenID connect với google cho website được rất tiện lợi. 
Có thể tuỳ biến. VD xác thực với google có thể gửi url authen tới email. Có thể chia người bình thường dùng đăng nhập với google, nhân viên thì đăng nhập riêng bằng tk mk.
Phiên bản mới nhất của OpenID là OpenID Connect, nó kết hợp OpenID authentication và OAuth2 authorization để vừa xác thực vừa ủy quyền.

2) Oauth 2.0: là chuẩn để authorization. OAuth2 cũng là 1 nền tảng OpenID Connect, có cung cấp OpenID để xác thực.
Vd: Alice đk tk NewsApp và có tính năng tùy chọn xem ai là bạn bè của cô ấy cũng dùng NewsApp để kết nối với họ. Alice chọn login bằng facebook và được hỏi có muốn chia sẻ list bạn bè trên Facebook với NewsApp không. Nếu chọn có, Alice sẽ điều hướng trở lại NewsApp với 1 token, NewsApp dùng token này để lấy list friends.
=> Do đó OAuth2 có 1 lớp OpenID ở bên trên bởi vì chính vc ủy quyền authorization cũng là 1 hình thức xác thực r. Mỗi token được chia quyền riêng dùng các data nào.

3) SAML: Security Assertion Markup Language là chuẩn cũ cung cả authentication và authorization, có SAML 2.0 => k dùng



# OAuth2
Cơ chế: 
- Đk cho App trên trang của Google Auth 1 ClientID và SecretCode và xác định luôn các chức năng Google API mà App muốn dùng. VD xem được thông tin cá nhân, hay chỉ cần login
- User vào App và ấn GoogleSignIn button để chuyển đến trang của google, nhập username password để đăng nhập. 
OAuth2 chuẩn url có dạng: https://accounts.google.com/....&client_id=<ClientId>&redirect_uri=<RedirectURL>. Để ý đúng tên miền accounts.google.com tránh giả mạo
- User click "Allow" để đồng ý dùng OAuth2 truy cập đến tài nguyên cụ thể, GoogleAuth sẽ sinh 1 mã code và gửi cho App thông qua cái RedirectURL. Tức App cần setup sẵn sàng tại RedirectURL để nhận giá trị mã code kèm các thông tin xác thực khác. VD OAuth2 chuẩn url sẽ gửi dạng: http://localhost/?code=..<mã code dài>...
Để đảm bảo cái url kia đúng là App thì cần có bước xác thực App với Google thông qua SecretCode được gửi ở dạng public trên url.
- App nhận về mã code sẽ cung lại cho Google Auth server để nhận AccessToken, phải xác thực cả ClientID và SecretCode của App là hợp lệ. Gửi kèm AccessToken ở mỗi request.
VD OAuth2 chuẩn request là: POST với body code=<Code>&redirect_uri=<RedirectURL>&client_id=<ClientId>&client_secret=<SecretCode>

SecretCode thì private chứ mã code gửi có thể k an toàn, nên google mới bảo mật thêm là mã code chỉ được dùng 1 lần, sau khi sinh accesstoken thì code cũng hết giá trị. 
Nếu lộ mã code -> k sao vì hacker kb SecretCode nên k sinh được accesstoken. 
Nếu lộ SecretCode -> nó phải nghe lén được mã code hoặc biết tk mk để lấy được mã code để sinh accesstoken
Nếu lộ accesstoken -> k sao vì có hạn sử dụng. 

VD: Google là 1 SSO. Login vào gg xong là có accesstoken vào các server con, vì mỗi app có 1 resource server riêng như Google Resource Server của gmail, calendar. Luồng:
Client -> Google: Đăng nhập và cấp quyền
Google -> Client: Mã ủy quyền
Client -> Server: Gửi mã ủy quyền
Server -> Google Auth Server: Gửi mã ủy quyền + client_id + client_secret
Google Auth Server -> Server: Trả về access token (và refresh token)
Server -> Client: Trả access token
Client -> Server: Gửi yêu cầu API kèm access token
Server -> Google Resource Server: Truy vấn dữ liệu kèm access token
Google Resource Server -> Server -> Client: Trả dữ liệu

