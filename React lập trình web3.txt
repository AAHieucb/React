React lập trình web3


# Các loại request của ethereum
wallet_watchAsset -> thêm loại token mới vào ví
eth_requestAccounts -> unlock ví và connect tk vơi website
wallet_addEthereumChain -> thêm chain mới và gọi switch, nếu chain mới tồn tại rồi thì chỉ gọi switch
wallet_switchEthereumChain -> đổi chain
wallet_requestPermissions -> connect ví vào website
wallet_getPermissions -> check xem đã connect hay chưa
eth_getEncryptionPublicKey -> lấy encryption key
eth_decrypt -> decrypt thứ được encrypt với encryption key
eth_sign -> dùng eth sign
personal_sign -> dùng personal sign
personal_ecRecover -> recover lại address từ message của personal_sign
eth_signTypedData -> Dùng Sign Typed Data
eth_signTypedData_v3 -> Dùng Sign Typed Data v3
eth_signTypedData_v4 -> Dùng Sign Typed Data v4



# Thư viện
-> ethereum-multicall: giúp tạo multicall mà ta kp tự deploy 1 contract multicall riêng nữa
-> wagmi rainbowkit: connect ví và dùng ethereum hook 
-> eth-cli: giúp sinh cặp piv/pub key. Gõ vào terminal "eth address:random"



# Dùng list rpc dự phòng
Ta có 1 list rpc url dự phòng vì url có thể nghẽn. Nếu đang dùng mà 1 rpc bị hỏng thì refresh lại page sẽ chọn rpc khác
Mỗi khi user vào trang web, sẽ query thử 1 lệnh getBlockNumber với list rpc Promise.any xem cái nào trả nhanh nhất thì lấy



# Xây page thống kê
Khi thống kê data của 1 user nào đó thì cần dùng Sign Message để xác thực.
Khi cần thống kê thì làm API từ server riêng, server này sẽ tự fetch API từ blockchain về và ta query vào đó, server có thể xử lý bằng nhiều cách: 
- Nếu data k cần update thời gian thực thì cứ viết script tự động fetch sau 1 ktg cố định
- Nếu data cần update theo thời gian thực thì viết subscribe sự kiện, bắt event mất kết nối thì tự kết nối lại
- Nếu data lớn và ta cần lấy lại tất cả từ block đầu tiên đến hiện tại và tiếp tục bắt thì có thể dùng The Graph hoặc tạo 1 server tương tự
- Nếu data đơn giản thì gọi trực tiép vàp contract hoặc tìm API bên thứ 3.


