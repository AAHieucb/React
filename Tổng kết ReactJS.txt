# Basic
npx create-vite@latest => thay thế hoàn toàn CRA deprecated

-> Compiler sẽ chuyển từ JSX syntax sang JS bằng babel. JSX "label for" đổi sang "label htmlFor" => Tổng hợp: https://reactjs.org/docs/dom-elements.html
React.isValidElement(<ele>)

-> Dùng list buộc phải có key unique, nếu k khi thay đổi phần tử sẽ bị sai. Nếu k đổi thì dùng index làm key cũng được.
VD: Điểm khác biệt là ta xoá đi ptử thứ 8 trong list thì ptử 9 sẽ mang key là 8, ptu 10 sẽ mang key là 9, dẫn đến in sai.

-> HOC (Higher order component): hàm nhận component làm wrapper cho ra 1 component khác => k dùng mà nên biến thành 1 hook

-> Automatic Batching React 18
VD: setTimeout(() => { 
  setSize((oldSize) => oldSize + 1); setOpen((oldOpen) => !oldOpen); // state đổi liên tiếp sẽ tối ưu gom lại và render 1 lần thôi
}, 1000);
=> Đề phòng người dùng k muốn batching, nó sinh ra hàm flushSync để xem có update DOM hay k
function handleSubmit() {
  flushSync(() => { setSize((oldSize) => oldSize + 1); }); // React has updated the DOM by now
  flushSync(() => { setOpen((oldOpen) => !oldOpen); }); // React has updated the DOM by now
}

-> Dùng biến môi trường: có thể chia file .env, .env.production, .env.staging cho từng loại môi trường khác nhau
Có sẵn như CRA (REACT_) hay Vite (VITE_), hoặc dùng cross-env, dotenv.
Cũng có thể custom với webpack bằng lib dotenv-webpack, VD đổi k dùng tên file là .env nữa



# Dùng react compiler:
Full docs: https://react.dev/learn/react-compiler
Nó k render lại con nếu cha đổi props klq tới con, mà k cần useMemo component con => bỏ hoàn toàn useCallback, useMemo, React.memo
Biến const khai báo trong component sẽ k tạo lại sau mỗi lần render trừ khi nó phụ thuộc bién khác và biến đó bị đổi, mà k cần useMemo.

npx react-compiler-healthcheck@latest => check dự án hiện tại có tương thích với react compiler không.

eslint-plugin-react-compiler => package giúp eslint báo lỗi nếu dùng thư viện or code k tương thích với compiler. Chỉ cần cài và thêm vào eslint config:
import reactCompiler from 'eslint-plugin-react-compiler'
export default [
  {
    plugins: {
      'react-compiler': reactCompiler,
    },
    rules: {
      'react-compiler/react-compiler': 'error',
    },
  },
]

Nếu dùng vite phải thêm babel-plugin-react-compiler@beta và thêm vào vite config:
plugins: [
  react({
    babel: {
      plugins: [
        ["babel-plugin-react-compiler", { compilationMode: "annotation" }]
      ]
    }
  })
]
K được dùng swc version của react trong vite mà phải dùng normal version.
--> { compilationMode: "annotation" } chỉ có tác dụng với các component sử dụng "use memo" bên trong, k có thì áp dụng mọi component

Trong nextjs, cài babel-plugin-react-compiler và thêm vào next config: 
experimental: {
  reactCompiler: true,
}



# Cách ref tới 1 thẻ
Nếu thẻ đó có sự kiện như onClick thì ta có thể lấy mọi thông tin của thẻ đó luôn. VD event.target.innerText
Dùng biến lưu thẻ thì có thể truy cập mọi thứ của thẻ thông qua biến
Đảm bảo hàm chạy sau khi render thì có thể dùng query selector để lấy thẻ

-> Dùng const ref = useRef(null); rồi cho vào attribute ref của thẻ => bỏ createRef, thay thế forwardRef
VD: khi thẻ cha có hàm đổi styles của con của thẻ con, truyền ref vào con để refer tới thẻ bên trong con được.

-> Dùng useImperativeHandle: component cha gọi 10 hàm của component con ở nhiều thẻ mà chỉ truyền 1 ref được. 
URL: https://courses.webdevsimplified.com/view/courses/react-hooks-simplified/



# Tích hợp thư viện => các thư viện 1-2 năm k update cũng nên bỏ 
-> Ant Design, Blueprint UI, Rebass, Fluent UI, Evergreen UI, Grommet, react-foundation, Primereact, Bulma, materialize-css@next, React Suite, Kendo react (component lạ), radix-ui khó dùng
Chakra UI, Bootstrap, mui* v7, Senmatic UI
cuicui: thư viện ui sẵn component chỉ cần copy paste, rất nhiều component lạ
Có nhiều hệ thống thiết kế đi kèm thư viện UI như IBM Carbon* hay Twilio Paste, nó chứa guidline và các component chỉ dẫn cách để tạo 1 hệ thống UI có design nhất quán

Lib component kèm animation rất mạnh:
https://ui.aceternity.com/components 
https://www.ui-layout.com/components
https://www.cult-ui.com/docs/components/
https://www.eldoraui.site/components
https://syntaxui.com/components
https://www.hover.dev/components/
https://animata.design/docs

Bit Cloud: Là lib UI của bit.dev, cài nó thì dùng được thập cẩm component của nhiều thư viện khác nhau, tái sử dụng và chia sẻ giữa các dự án.
Search component trên bitcloud, ấn từng mục của các thư viện UI khác nhau. Nhưng trước đó phải cài bit trong dự án, nó sẽ import dưới dạng file cả dự án component vào và ta có thể chỉnh sửa tùy ý. Sau khi lấy components về rồi copy vào src/components để dùng.
react-rainbow-component*: Lib UI component có sẵn nhiều component lạ, nên thường dùng kết hợp bit cloud để tối ưu sức mạnh

-> ReactAdmin*: Thư viện giúp tạo trang admin cho các ứng dụng React dễ dàng.
ra-data-json-server dùng riêng cho ReactAdmin cung vào data json

-> react-intl*: thư viện giúp format số và chữ theo i18n
--> @replexica/react hỗ trợ i18n bằng AI. Có thể tích hợp vào CI/CD tự động translate, đổi tự dịch lại chỗ đó chứ k dịch lại từ đầu.
npx lingo.dev@latest show locale targets # Lists available target languages
Cài 1 phát r tạo i18n.json là cứ thế dùng thôi

-> clsx*: tạo string với điều kiện, thg dùng cho className.
prop-types*: giúp typecheking và gán default value cho props của 1 component, check props type lúc runtime giảm thiểu lỗi. 
Date-fns hoặc Luxon => thay thế react-moment, moment-timezone
lodash*: https://lodash.com/docs/4.17.15 thay thế underscore => Có thể import tree shaking đỡ nặng: npm i lodash.merge
npm i rimraf -> tạo command: "build:clean": "rimraf ./build", là xong
react-router-dom v7 => bỏ tanstack router

-> react-scan => best lib giúp phát hiện vấn đề về performance, debug rerender luôn. Thay thế @welldone-software/why-did-you-render
Có browser extension, npm package. CDN: <script crossOrigin="anonymous" src="//unpkg.com/react-scan/dist/auto.global.js"></script>

-> react-cssfx-loading*. Bản html thuần: https://cssfx.netlify.app/
https://loading.io/* => icon loading customize thoải mái, export ra gif hay svg đều được
react-spinners*: thư viện component loading
react-content-loader: thư viện tạo skeleton svg nhẹ

-> @tinymce/tinymce-react*: thư viện giúp tạo TinyMCE text editor cực mạnh cho các kiểu input text như gg docs
react-hot-toast*
react-modal 
react-player*: custom play video
react-slick và slick-carousel: tạo carousel slider
react-trend: vẽ đường line
react-avatar-edit*: cắt ảnh làm avatar
react-paginate: tạo component phân trang
react-perfect-scrollbar: thư viện tạo thanh scrollbar, nó cung thêm tính năng khác như bắt sự kiện scroll đến vị trí trục y nào
react-text-transition
react-color*: color picker
react-datepicker: date picker
react-pdf
sweetalert: hộp thoại alert đẹp
react-qr-reader: quay camera QR
@pqina/flip*: tạo Flip Clock chuẩn
cmdk: hiển thị menu dạng có thể search
React Email cung components cho việc gửi email
@xyflow/react*(bản mới chuẩn của reactflow): thư viện rất mạnh để vẽ interactive graphs and node-based editors, tạo ra như kiểu draw.io ấy

-> react-select*: tạo đủ loại component input
react-text-mask*: custom input hiển thị

-> react-dnd*: thư viện drag drop của React cực mạnh, mỗi tội dùng redux phiên bản cũ nên xung đột
react-grid-layout: tạo grid draggable items

-> recharts*: Vẽ đồ thị kiểu học thuật.
highcharts-react-official highcharts*: tạo graph đẹp, responsive, loading
Victory thư viện vẽ biểu đồ cho data. Tremor cũng thế nhưng đẹp hơn. React Diagrams cho user vẽ biểu đồ có thể drag customize như draw io
D3 thư viện chuyên data visualization đủ loại phức tạp

-> Refine giúp cho việc xây ứng dụng react CRUD dễ dàng hơn. Nó cung copmonents, state management, hook.

-> Icon lib: react-icons*
https://ionic.io/ionicons => đơn giản mà đẹp
--> Lib cho icon svg tuỳ ý chỉnh sửa màu sắc, kích thước, stroke width
https://tablericons.com/category/Arrows => đủ loại định dạng
https://lucide.dev/icons/archive => nhiều icon lạ
https://icon-sets.iconify.design/ => có cả icon hình như cờ các nước cũng có
https://www.streamlinehq.com/icons => nhiều icon dị
https://iconoir.com/ => nhiều hình khối lạ
https://www.orioniconlibrary.com/all-icons => nhiều icon dị 
--> Or dùng đồng bộ 1 loại icon như 1 theme:
https://icons.getbootstrap.com/ => nên dùng nếu dùng bootstraps
https://heroicons.com/ 
https://feathericons.com/ 
https://boxicons.com/
https://www.uicons.com/icons-round?weight=medium&fill=outline&round-plans=free
https://iconmonstr.com/page/80/ => monochrome

-> styled-components*, @emotion/styled => style css trong js
linaria*: tạo component từ việc style lại tag html, nó extract code ra css files khi build làm kích thước lớn hơn. Còn styled-components thì k nhưng tăng JS bundle size. 

-> Clerk* => tool mạnh nhất để tạo dialog authentication. Nó hỗ trợ sẵn đủ loại login, thậm chí là login bằng tiktok hay discord, metamask, 2FA,... components UI sẵn luôn
-> Okta: lib authentication nên dùng với React thuần vì tương thích với react-router-dom
Setup: Login Okta -> Application -> Tạo 1 ứng dụng với OpenID Connect và SPA -> Sign-in và sign-out URI là đường dẫn của ứng dụng khi redirect, set port -> Allow everyone in your organization to access -> nó cung ClientID xác định app và Okta domain (dev-xxxxxxxx.okta.com). Tạo 1 server check access token từ FE qua Okta API với OAuth 2.0
Tạo dự án mẫu với okta-cli: tải okta cli -> okta login có org url là https://dev-xxxxxxx.okta.com, id là client id của app -> "okta create react"
ISSUER ID là https://dev-xxxxxxx.okta.com



# Pattern tuỳ biến style component
Khi dùng các component có sẵn từ nhiều nơi or các thư viện UI, nó thường cung API ở 1 mức độ nhất định thôi. 
=> Ta có thể ép style theo ý ta bằng CSS Selector, viết 1 thẻ bao ngoài và mang 1 class rồi cứ dùng css selector để style cho các con bên trong tùy ý. 



# React animation
-> Các kiểu tạo animation trong react: 
Animation css cơ bản: transition, @starting-style, dialog, details-content, interpolate-size allow-keywords, allow-discrete, :hover
Animation css keyframe
Lib có sẵn component animation hoặc tạo animation dễ hơn: MUI, @pqina/flip, react-text-transition, framer-motion, react-spring.
Nâng cao hơn nữa thì có threeJS là thư viện animation 3D cho react 

Kết hợp sự kiện JS: onMouseLeave onMouseOver thì đổi biến or setInterval useEffect đổi biến, r thuộc tính css gán theo biến
VD Tạo số chạy khi số liệu thay đổi hoặc component hiện ra lần đầu => ref tới "Projects Leaderboard HighChart / AnimatedNumber". 
Cơ chế: số là 1 biến state được đổi giá trị nhanh liên tục để rerender

Kết hợp dùng JS sửa css như html thuần với useLayoutEffect + useRef + requestAnimationFrame
useLayoutEffect(() => {
  const content = contentRef.current;
  if (isVisible) {
    content.style.maxHeight = content.scrollHeight + "px";
    content.style.opacity = "1";
  } else {
    requestAnimationFrame(() => {
      content.style.maxHeight = "0";
      content.style.opacity = "0";
    });
  }
}, [isVisible]);
=> useTransition chỉ khi xử lý logic nặng bằng js thôi, vd search nhanh lag. Còn đổi JS liên quan đến animation nên dùng requestAnimationFrame, nó đảm bảo frame sau sẽ gom đổi tất cả. setInterval setTimeout vẫn thực hiện tiép khi tab browser bị ẩn or k focus, nhưng requestAnimationFrame sẽ dừng lại giúp tiết kiệm tài nguyên

*** Để thẻ luôn hiện ở đó, isOpen=true thì gán thêm class để hiện ra kèm transition là được => best practice phổ biến nhất, thư viện chỉ giúp code như v gọn hơn thôi.
Nếu ta làm kiểu thẻ bth k tồn tại, khi mở mới mount vào DOM thì cần chú ý nó có thể break layout hiện có. VD gap hay grid flex bị sai. Dialog thì k tính vì dùng portal rồi.

-> Animation library: 
animate.css*: best animation css lib
react-spring*: tạo custom animation dưới dạng react hook. URL: https://www.joshwcomeau.com/react/boop
framer-motion*: animation được cho cả svg path
react-burger-menu: tạo animation cho thanh menu dọc thg khi màn hình nhỏ
@use-gesture: animation mạnh dựa vào tương tác của người dùng.
*** reactuseanimations-: lib giúp tạo microInteraction, là animation các thứ nhỏ nhặt khi hover và click, càng đơn giản càng đẹp
https://cursify.vercel.app/components => thư viện animate cursor đỉnh

--> Animation với scroll: 
react-awesome-reveal: reveal animation
react-animated-cursor => thư viện tạo animate cursor mỗi khi rê chuột đi đâu
react-parallax-mouse => thư viện hiệu ứng parallax bằng cách di chuyển chuột



# Thao tác với form
Nên gom mọi trường vào 1 biến useState object với setState({ ...state, [e.target.name]: e.target.value }); cho gọn.
***Khi dùng form, hãy luôn đặt thuộc tính autofocus vào ô đầu tiên mà người dùng cần nhập.

return false trong hàm xử lý sự kiện sẽ ngăn chặn chuyển trang, hoặc dùng e.preventDefault() tương tự.
Nó có thể áp dụng trong form hoặc bất cứ component nào gây chuyển trang. Vd thẻ a có href có thể xử lý điều này trong onClick của nó

Để submit form thông qua phím enter, nên giữ onSubmit của form và button có type submit là được.
Cách khác là custom khi form được focus thì bắt sự kiện onKeyDown bấm phím Enter.

-> react-hook-form*: lib tương tự formik. Nó còn có tool generate code luôn.

-> Lib formik*: điều đb là nó tự xử lý tối ưu khi có thay đổi chứ k render lại cả form. 
C1: Dùng component có sẵn Formik, FastField, Form, ErrorMessage => Cách này vẫn mang các điểm lợi của formik như render độc lập nhưng ít dùng.
C2: Cách dùng hook useFormik. 
Khởi tạo initialValues, validate, onSubmit. 
Hàm validate được gọi mỗi khi data của formik được update, return biến errors, biến này có thể truy xuất với formik.errors làm error helper text. Còn có formik.touched để truy cập xem trường nào đã từng được thao tác lần đầu chưa. VD: Để làm kiểu ấn vào trường a r ấn ra ngoài, bth nó sẽ chạy vào validate và set errors cho cả 2 trường a và b vì chưa có gì, nhưng ta chỉ muốn error trường đã tương tác thôi thì check formik.touched để đảm bảo 1 input chỉ báo lỗi 1 trường nếu đã tương tác và giá trị bị sai.
Có thể truy xuất giá trị bất cứ đâu với formik.values, còn formik.isValid trả ra true nếu hàm validate return ra object error rỗng, thực tế giá trị này rất hay ở chỗ nó formik.isValid ban đầu vào nó luôn trả ra true nếu ta chưa set gì cả, từ đó lợi dụng để ban đầu vào thì button submit enabled, khi ấn vào mới hiện ra các trường required cần dùng
Để update có hàm formik.setFieldValue("<field>", <value>) hoặc trong onChange có thể dùng formik.handleChange nhận vào biến e là input, cũng nên bắt cả onBlur={formik.handleBlur}. Mọi hàm khi gọi từ formik như change với blur đều chạy vào validate kiểm tra lỗi hết. setFieldValues hay handleChange k dùng async await vì sẽ bị lag khi nhập.
handleChange sẽ update bất đồng bộ nên ở phía dưới ta sẽ k thể sử dụng ngay formik.values mà chỉ có thể thao tác với e.target.value. Nên kết hợp debounce.
Submit form với formik.submitForm(e) và reset form với formik.resetForm()



# React hook
1 react hook bắt đầu bằng use, chỉ dùng hook ở top level, k dùng trong câu đk, hàm con, loop, nếu ta muốn dùng điều kiện thì phải nhét logic đó vào trong hook.
hook chạy lại mỗi khi rerender nhưng biến const sẽ k khởi tạo lại nếu giá trị k đổi (react compiler)

URL: https://courses.webdevsimplified.com/view/courses/react-hooks-simplified/
Có useDebugValue; useEffectEvent** fix dependency error của useEffect.

-> Thứ tự react render:
Chạy useInsertionEffect (k lấy được DOM tree) -> React render component -> Update DOM -> Chạy useLayoutEffect (access được DOM tree) -> Vẽ giao diện -> Vẽ xong thì chạy useEffect, nếu đổi state sẽ lặp vòng mới
- Điểm đb là useEffect thực hiện asynchronous, còn useLayoutEffect thực hiện synchronous. Nên dùng useLayoutEffect khi cần đổi nhanh style lên DOM, update phức tạp k dùng vì sẽ delay vẽ lên UI, nếu dùng useEffect sẽ bị giật do chạy song song với render nên phải chờ lần render tiếp mới vẽ style mới lên.
- useInsertionEffect được gọi synchronous. Chỉ dùng khi dùng lib css-in-js. Nó k access và ref, k update state. Chỉ dùng kiểu update document.head hay thêm thẻ <style> bằng code JS.

-> Dùng useState: Có thể tách mỗi biến 1 useState hoặc gộp trong 1 object useState
setState(state + 1) tương đương setState(state => state + 1) nhưng cách truyền hàm đúng hơn vì state trong hàm luôn mang giá trị mới nhất ở future. Có lúc biến state truyền vào nó không phải giá trị mới nhất mà bị giữ lại như khi "Tạo đồng hồ đếm ngược".

-> Dùng useEffect: có thể cản chạy lần đầu tiên khi data chưa có gì bằng cách check data k có gì thì bỏ qua.
Component khi chạy từ trên xuống, gặp useEffect sẽ lưu lại chờ return DOM cập nhập xong sẽ thực hiện. Nếu lại thay đổi state sẽ render lại tiếp.
Dùng return là 1 function. Khi 1 hàm useEffect được gọi, nó sẽ gọi vào return của useEffect cũ rồi mới thực hiện useEffect mới, cũng gọi khi unmount.
Bản chất các loại hook có dependencies, nó lưu trong cache cho đến khi dependencies thay đổi thì xóa khỏi cache và thêm cái mới vào cache tiếp thôi.
Hàm gọi trong useEffect thường lưu lại bằng useCallback và xđ đủ dependencies.
Component A chứa component B, cả 2 cùng useEffect dependencies đến biến x, nếu biến x đổi thì useEffect của cha sẽ thực hiện trước r đến dần các useEffect của con.
Nhiều thư viện npm tạo ra kp để dùng cho React mà HTML JS thuần, nhưng vẫn ép dùng trong React được 1 số TH với useEffect như ThreeJS
Trong useEffect mặc định setState xong vẫn mang giá trị cũ, nhưng bên ngoài sẽ render lại liên tục để hiển thị với giá trị mới khi chạy qua useState. VD: setLoading(true) trong useEffect thì hàm trong useEffect vẫn thực hiện tiếp với loading là false nhưng bên ngoài được render lại ngay với giá trị loading là true nhé.

VD case lỗi: 
function Test ({ url }) {
  function onConnected() { console.log(url); }
  useEffect(() => onConnected(), [url]);
} 
=> Ta đổi url thật nhanh 2 lần liên tiếp, useEffect sẽ trigger 2 lần gọi onConnected. Mà url là props, onConnected sẽ thao tác với data là url mới nhất. Sẽ có lúc nó trigger 2 lần với cùng 1 data mới nhất. Do đó phải thêm useCallback và dependencies [onConnected] cho useEffect.
=> Với react compiler, nó ngầm dùng useCallback cho onConnected thì k cần viết

-> useReducer: giống useState nhưng có thể custom hàm setState thành 1 hàm riêng đặt ở ngoài component, dispatch action sẽ trigger hàm return state mới.
Có thể dùng kết hợp với ReactContext tạo ra kiểu gần giống với redux.

-> Dùng React.Context + useContext:
Chú ý state trong context đổi sẽ kéo mọi wrapped component rerender. Có thể chia nhiều context khác nhau cho từng con.

-> useMemo: hàm nên dùng useCallback, biến và component dùng useMemo => react compiler đã stale hook này.
Tương tự const Con = React.memo(props => { return <>; }, x); chỉ khi props hay x đổi mới rerender lại Con, chỉ dùng khi Cha có Con phức tạp mà k muốn Con rerender

-> useId: sinh id unique trong phạm vi app hiện tại. VD 1 component có trường id mà tái sử dụng render ở nhiều nơi, dùng useId cho nó sẽ đảm bảo duy nhất.
Trong redux toolkit cũng có nanoid sinh id ngẫu nhiên

-> useSyncExternalStore read và subscribe vào external data source => VD ta subscribe vào localStorage được

-> use(Promise) => k cần dùng nếu dùng react-query
- Dùng với 1 promise trong 1 component, có thể kẹp trong conditional được. Wrap với ErrorBoundary và Suspense để hiện fallback, component dùng use(Promise) sẽ hiện fallback nếu promise chưa thực hiện xong, k cần dùng await cho nó.
- Dùng với use(ReactContext) thì như useContext chỉ khác là dùng được trong câu điều kiện

-> useTransition: giảm độ ưu tiên của 1 hàm, chỉ chạy và render trong background khi rảnh để k ảnh hưởng performance và nếu có 1 lệnh tương tự thì chạy câu lệnh mới, dừng lệnh cũ luôn => dùng khi đổi state phải xử lý logic nặng bị lag, mà k dùng được useDebounce.
Khi code cần xác định phần task nào gây lag cho browser đưa vào startTransition. VD fetch API thực tế k gây lag cho browser thì k cần. VD search 1 chữ r thực hiện filter trên 1000 phần tử r set vào list thì hành động đổi text k cần mà phải dùng startTransition cho hành động filter và setList.

useDeferredValue: tương tự nhưng delay việc update giá trị cho 1 biến. Vd ta gõ input thay đổi biến a và dùng biến a để search list 1000 phần tử. Gõ nhanh thì a đổi ngay và chạy logic. Khi đó ta dùng useDeferredValue để biến a vẫn update realtime nhưng biến aDeferred cho vào hàm search sẽ chỉ update khi k bị lag.
Việc aDeferred update như nào phụ thuộc vào mức độ bận của main thread, nếu rất bận thì nó càng skip intermediate value nhiều hơn. Tương tự nó k dùng cho callapi mà dùng do lag vì update tuần tự. Chứ call api k lag nhưng ta cần giảm thiểu số lần call tới mức tối thiểu thì dùng debounce tốt hơn.

=> 2 ví dụ đó là 2 usecase tối ưu nhất. useTransition dùng khi cần chạy 1 hàm nặng ảnh hưởng tới performance, kể cả khi k đổi state. useDeferredValue dùng khi cần chạy 1 hàm nặng do phụ thuộc vào 1 giá trị được update liên tục.

-> useOptimistic dùng khi biết khá chắc lệnh call sẽ success, fail tự undo
URL: https://www.youtube.com/watch?v=VBlSe8tvg4U => useOptimistic khi người dùng update và API chưa thành công đã tắt page, có thể cản lại với window event "beforeunload"
=> Chốt là ít dùng mà thường dùng useDebounce hơn và kết hợp tự implement failed undo cho useDebounce



# Custom hook
Custom hook là 1 function có mục đích nhận đầu vào và cho đầu ra tự động biến đối theo đầu vào, return giá trị or hàm, chứ kp component. Nó chỉ là gom logic trong 1 FC vào 1 hàm để tái sử dụng thôi
Mỗi lần function chạy đến custom hook sẽ thực hiện lại mọi thứ bên trong. Cần đảm bảo các biến bên trong cũng là hook để không khởi tạo lại mỗi lần chạy. Hoặc return useCallback, useMemo để không chạy lại nếu k cần.

-> URL: https://courses.webdevsimplified.com/view/courses/react-hooks-simplified/
useToggle, useTimeout, useUpdateEffect, useArray, usePrevious, useStateWithHistory, useFetch, useScript, useDeepCompareEffect, useEventListener, useOnScreen, useGeolocation, useStateWithValidation, useSize, useEffectOnce, useDarkMode, useCookie, useTranslation, useOnlineStatus, useRenderCount, useDebugInformation, useHover, useLongPress
Có thể lấy vị trí địa lý, thêm script js CDN được
--> useStorage giúp subscribe sự thay đổi của localStorage. Browser cũng có sự kiện storage phát ra khi nó đổi giá trị

-> Lib @mantine/hooks, aHooks, usehooks-ts* cung hàng loạt custom hook.
useMediaQuery useClickOutside useMousePosition useClipboard usePagination
useIntersection check xem 1 component có visible toàn bộ trên màn hình không
useScrollLock khóa và mở khóa thanh scrollbar
useForm tạo và validate form, thay thế formik



# Progressive web app (PWA) 
Dùng web worker để: cache offline, push notification, cài web như 1 app trên mobile
Tuỳ ý custom cache offline cho routing, assets, revalidate.
URL: https://create-react-app.dev/docs/making-a-progressive-web-app/
VD có template trên git "cra-template-pwa", mở lên browser 1 lần r tắt mạng đi, refresh trang thấy web vẫn chạy bth, tab application có Cache Storage.



# Request API
Luôn có try catch + async await

-> Setup proxy prefix: nếu chỉ connect 1 server, có thể viết trong package.json FE trường proxy là base url. Mọi request API ở FE sẽ dùng base url đó
VD bth ta dùng: axios.get('http://localhost:4000/api/new') thì bh chỉ cần axios.get('/api/new') nếu dùng "proxy": "http://localhost:4000" trong package.json
Có thể dùng trong hàm axios.create để set baseURL.

-> Dùng axios: điểm thích nhất là .get thì params là undefined sẽ tự động k cho vào param, tự động xử lý array

--> Khi gửi token đi có thể dùng axios.interceptors.request.use() và gán config.headers['X-Token']=<token>
Khi nhận về dùng axios.interceptors.response() để lấy lỗi trả về là expired thì code luôn việc request lại accessToken cho người dùng



# Pattern loading fetch API
Component bao ngoài dùng useEffect fetch API với dependencies [] và Promise.all, bên trong fetch data cơ bản chung. 
Dùng react-query thì mọi thứ perfect, xử lý loading đầy đủ, hiển thị giá trị hiện tại mặc định, khi nào fetch xong thì tự nhảy thành giá trị mới, cache.
Loading nên dùng skeleton từng phần tử. Lib như highchart có sẵn loading thì dùng của nó hơn.

Khi người dùng update data mới, ta update realtime bằng cách:
- Fetch lại data, nếu data thường xuyên thay đổi, hoặc cần độ chính xác cao.
- Update data thủ công trong FE như optimistics, dùng khi data đơn giản và thường thành công.

-> Update component A ảnh hưởng component B, cần đảm bảo có qtr cần update realtime không. Nếu cần: 
- Vào page dùng data nào thì fetch lại data đó luôn để đảm bảo realtime. Data lớn fetch lâu, ít đổi thì lưu cache.
- Dùng react-query, ta có thể invalidate query dễ dàng
- Nếu case đơn giản thì ta gọi hàm fetch data của B ở cuối hàm update của A luôn, dù làm v sẽ khó mở rộng trong tương lai.
- Xây biến needToUpdate cho từng component lưu vào redux, update biến này khi cần refetch component nào, component refetch dựa vào dependencies needToUpdate là được => chẳng khác nào ta đang implement lại react-query invalidate cả.



# Other
-> Cách debug trong React
Mở tab components -> settings -> highlight updates => Tool này giúp tìm các components render thừa
1) Debug bằng browser: Gõ debugger vào code React hoặc search code browser và đặt breakpoint -> mở browser sẽ dừng lại chỗ đó
2) Debug trên VSC: Vào dự án react trên VSC -> Tab Debug -> Run and Debug -> Phải tạo file .vscode/launch.json, chú ý url là url web VD http://localhost:3000, và webRoot là thư mục làm việc chứa index.js VD ${workspaceFolder}/src. 
URL: https://code.visualstudio.com/docs/editor/debugging#_launch-configurations

-> Pattern tổ chức components
Các component klq đến nhau nên chia ra để state 1 comp đổi sẽ k rerender lại component k dùng state đó. 
VD 2 TH: 1 là <Search> <Hiển thị> tách 2 component; 2 là <Search> chứa <Hiển thị> ở cuối.
=> C1 chia ra component con nhưng muốn dùng data của <Search> trong <Hiển thị> thì phải dùng props truyền từ component cha truyền cho con k tốt. Theo OOP thì <Hiển thị> không nên nằm trong <Search> là đúng
VD: Ấn 1 button hiện ra dialog thì nên để button đó và dialog cùng là 1 component chứ k tách 2 file riêng

