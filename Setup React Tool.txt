Setup React Tool


# Tool có sẵn của VSC
VSC có sẵn tool để format: mở file type mà VSC hỗ trợ -> CTRL+SHIFT+P -> Format Document With -> Chọn formatter mặc định
Như v mỗi lần chọn sẽ format file hiện tại. Còn để mở tự động format bằng formatter mặc định khi save file: CTRL+SHIFT+P
- Nếu chỉ mở để save ở file hiện tại: open workspace setting -> chỉnh editor formatting -> format on save
- Nếu mở để save mọi lúc: open user setting -> chỉnh editor formatting -> format on save
Chỉnh workspace setting sẽ sinh 1 file .vscode/settings.json trong dự án và bên trong chứa setting ta vừa set, còn chỉnh user setting thì phải mở open setting json mới xem được



# Eslint
Viết các quy tắc về format cho dự án, eslint sẽ phân tích code JS để xác định đoạn code vi phạm và fix chúng. Nhiều tool khác tương tự như JSLint, JSHint => Eslint là tốt nhất

-> Setup: k nên tạo thủ công mà nên dùng init
Tạo dự án -> npx eslint --init -> quyết định cài những cái gì nó sẽ tự động cài package tương ứng  -> tự sinh ra file config của eslint -> thêm configure dùng cho react: 
settings:{
  react: {
    version: "detect",
  },
},
-> vào package.json thêm script sử dụng eslint như ý ta. VD: "lint": "eslint src --ext .ts,.tsx" là sử dụng eslint với các file ts và tsx trong thư mục src -> npm run lint để chạy lệnh đó -> edit file .eslintrc.js để thêm các rules
VD: "eslint": "eslint đường/dẫn/tới/thư/mục/src/muốn/dùng", 
Ta có thể dùng: npm run eslint -- --fix để tự động sửa 1 số TH nhanh or nhét nó vào script package.json (--fix sẽ tự động dùng prettier xác định trong config)

--> Ta cũng có thể cấu hình từng file bằng cách thêm comment trực tiếp vào file chứa code JS. VD: /* eslint quotes: ["error", "double"], curly: 2 */ => k nên dùng như v

--> Mỗi lần check ta phải tự chạy lệnh, nếu muốn nó báo lỗi trực tiếp thì cài extension eslint về VSC -> cài xong phát là tự động bắt eslint theo file cấu hình luôn.
Có thể cài cho VSC tự động fix lỗi eslint trong dự án bằng cách: sau khi cài extension vào VSC -> CTRL+SHIFT+P -> open setting JSON(dùng workspace thôi) -> thêm:
"editor.codeActionsOnSave": {
    "source.fixAll.eslint": true,
    "source.fixAll.tslint": true //file typescript
},
"eslint.validate": [ "javascript", "javascriptreact", "html", "typescriptreact" ] // với các file có ngôn ngữ cần check
=> Mỗi khi save là các lỗi eslint quick fixes được tự động. Cài extension thì ở commandline tab output chọn task hoặc tab problems có thể xem debug của tool này.

-> .eslintignore

-> Custom các rules
{
  "plugins": [
    "react"
  ],
} => dùng plugins để mở rộng hoạt động của ESLint VD ở đây sẽ check cả với code JSX
{
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended"
    ],
} => extends có config có sẵn và có thể thêm vào config của riêng ta. Ở đây ta dùng cấu hình của người khác với eslint:recommended và react/recommended. Tương tự trên github còn có nhiều người làm sẵn các cấu hình eslint có thể tải về để dùng, chỉ cần thêm vào extends này là xong. VD strongloop
{
    "rules": {
        "quotes": [ // Ép string dùng '
            2,
            "single"
        ],
        "react/jsx-uses-react": 2, // Check code jsx
	    "indent": [ // Lùi dòng phải chuẩn 2 space. Với switch case thì chỉ 1
            2,
            2, // or "tab" nếu lấy 1 tab
            {
                "SwitchCase": 1
            }
        ],
        "linebreak-style": [ // Dùng line-break khác nhau ở 2 hđh
            2,
            "unix"
        ],
        "semi": [ // Luôn có dấu ; ở cuối hàm
            2,
            "always"
        ],
        "curly": [ // Phải có {} chứ k được bỏ nhanh như kiểu if else
            2,
            "all"
        ],
        "camelcase": [ // Tuân thủ camel case (k phải tất cả luôn là camelcase nhé)
            2,
            {
                "properties": "always"
            }
        ],
        "eqeqeq": [ // Phải dùng === or !== khi so sánh bằng và khác. "smart" tức là trừ các TH ss với typeof, literal value, ss với null thì k dùng === và !==
            2,
            "smart"
        ],
        "one-var-declaration-per-line": [ // always thì 1 line là declaration(k khởi tạo giá trị ban đầu) 1 var, initializations thì 1 line là initialization of 1 var
            2,
            "always"
        ],
        "new-cap": [ // new Constructor phải viết hoa tên Constructor
            2,
            {
                "capIsNew": true/false
            }
        ]
        "no-case-declarations": 0 // let const function class khai báo trong case của switch case thì phải có { } bao case đó. var thì thoải mái
	    "no-empty": "warn", // Cấm {} bị bỏ trống bên trong {}
    }
} => rules định nghĩa các quy tắc mà code phải tuân theo. Mỗi rule có 2 thông số: 1 là off(0), warn(1), error(2) và các tùy chọn. Tùy chọn có thể bỏ qua, các thông số kia có thể viết rõ dạng chữ or số. VD đầu tiên ở trên là ap dụng dấu ' cho mọi string trong code và kiếm tra import có đúng không, nếu sai sẽ trả ra error với exit code là 1.

Mọi rule: https://eslint.org/docs/rules/
{
    "parserOptions": {
        "ecmaVersion": 13,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        }
    },
} => ESlint mặc định check ES5, với ES6 trở đi phải cấu hình bằng parserOptions và cả JSX cũng phải cấu hình ở đây. Ở trên là cấu hình chuẩn cho code JSX và cả version ES6
{
    "env": {
        "browser": true,
        "es6": true
    },
    ...
} => Cấu hình môi trường mà code chạy. VD browser có biến window, document còn ES6 sẽ có các kiểu dữ liệu mới như Set chẳng hạn
{
    "globals": {
        "arguments": true,
        ...
    }
} => List các global var dùng trong dự án, nếu không khi truy cập vào biến global, eslint sẽ báo lỗi truy cập biến chưa định nghĩa, nên list toàn bộ biến global ra. window, document không cần định nghĩa lại vì env có sắn r. VD JS có 1 object truyền vào hàm là arguments mà không có môi trường định nghĩa nó, muốn dùng phải đưa vào global như trên



# Prettier
Eslint chuyên check lỗi hay chấm phẩy, cách đặt tên. Nó thường kết hợp Prettier chuyên format kiểu căn lề, khoảng cách vì làm hết trên eslint khiến rule quá phức tạp. 

-> Extension prettier tải sẽ thành 1 formatter trong máy luôn.
Tải Prettier -> ctrl shift p -> format -> configure formatter chọn là prettier -> đặt phím tắt nếu thích 
ctrl + , -> chỉnh cài đặt formatting cho VSC -> chỉnh các tính năng khác như format on save. Kết hợp eslint cx có format khi save thì save phát cả 2 tool chơi cùng lúc

-> Cài đặt package: viết ra file để đi kèm với dự án
npm install --save-dev --save-exact prettier -> tạo file mới đặt tên là .prettierrc.extension (bỏ .extension cũng được và nó tự hiểu là json) và bên trong:
{
  "printWidth": 120,
  "singleQuote": false,
  "tabWidth": 2,
  "semi": true,
  "trailingComma": "es5" // trailingComma là dấy phẩy ở cuối 1 cái dạng list, es5 sẽ có ở cuối của array và object
} -> format: npx prettier --write .
=> File config của prettier sẽ đè lên extension prettier

-> Prettier kết hợp Eslint bị conflict
Nó vẫn check bth chả sao nhưng có thể specific rõ: npm install --save-dev eslint-config-prettier => loại bỏ các eslint rule mà conflict với prettier

eslint-plugin-prettier giúp tích hợp 2 loại rules, nó cũng giúp viết prettier ngay trong file eslint, cài rồi sửa file .eslintrc.json:
"plugins": ["react", "prettier"],
"rules": {
    "prettier/prettier": [
        "error",
        {
            "printWidth": 80, // format chiều dài của 1 dòng nếu quá sẽ tự xuống dòng
            "trailingComma": "es5",
            "semi": false,
            "no-mixed-spaces-and-tabs": ["error", "smart-tabs"],
            "no-unused-vars": ["error"]
        }
    ]
}
=> Thông thường k cần cồng kềnh như v mà chỉ cần cài prettier (package or extension đều được) + eslint và eslint-config-prettier phát là xong dùng như bth thôi.

--> Phân biệt: eslint-config-prettier và eslint-plugin-prettier, khi dùng thường cài thêm cả 2
eslint-config-prettier loại bỏ eslint rule conflict với prettier rule. Để dùng cần có:
"extends": [
    "...",
    "prettier"
],
eslint-plugin-prettier tích hợp prettier rules với eslint rule. Để dùng cần có:
{
  "plugins": ["prettier"],
  "rules": {
    "prettier/prettier": "error"
  }
}
=> chú ý đúng thứ tự thêm. Nhưng bên cạnh đó còn có:
{
  "extends": ["plugin:prettier/recommended"]
}
là plugin giúp config hộ cho ta, nếu dùng cái này trong plugin thì ta k cần set như bên trên.

-> .prettierignore



# Lint-staged
Tận dụng lint-staged tự động format các file ở trạng thái staged của git.

-> Setup: npm install --save-dev lint-staged -> vào package.json thêm "lint-staged": {...} -> định nghĩa tập lệnh với các file ở trong trạng thái staged, nếu có thay đổi thì chạy ntn. VD: 
"lint-staged": {
    "*.ts": [
      "prettier --write",
      "git add ."
    ]
} -> thêm script: "lint:staged": "lint-staged" để dùng npm run lint:staged sẽ chạy toàn bộ các file xác định ở trên là đuôi .ts và chạy lần lượt các lệnh. Ở đây thêm git add . ở cuối đề phòng TH nếu có sự thay đổi thật thì sẽ add lại luôn mà ta k cần chạy lại 
=> Đây là setup cho mọi người, nếu chỉ dùng prettier với formatonsave local thì k cần nữa. 

-> Có thể tách file config .lintstagedrc và thêm vào các option để chạy. VD:
{
	"*.(js|ts)": "eslint --fix"
} 



# Commitizen + cz-conventional-changelog
Tool giúp generate commit message chuẩn conventional

Thêm vào README biểu tượng commitizen|friendly badge bằng: 
[![Commitizen friendly](https://img.shield.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)

-> Cài đặt:
npm i -D commitizen -> cài global nx để dùng command -> npm install cz-conventional-changelog --save-dev -> commitizen init cz-conventional-changelog --dev --exact [--force] thì nó sẽ thêm config url vào file packagejson -> Để dùng: git add . và k dùng git commit nữa mà dùng git cz -> git push như bth



# Husky
Bắt sự kiện trên repo, VD xử lý nếu code chưa đúng coding style sẽ k cho commit. Thường kết hợp với lint-staged.
VD lint-staged: commit xong -> sửa file sai format -> lại git add để đưa vào staged -> chạy script "npm run lint:staged" -> file tự fix lại theo command viết trong script
VD husky: mỗi khi commit, nó sẽ tự bắt và lệnh bên trên được thực hiện tự động chứ éo phải lúc nào ta cũng add xong run lint:staged như v đc

-> Cài husky và dùng pre-commit: npm install --save-dev husky -> khởi tạo: npx husky install -> xuất hiện thư mục .husky -> gõ command: npx husky add .husky/pre-commit "yarn lint-staged" sẽ bắt khi user gõ "git commit" sẽ tự chạy command yarn lint-staged -> nó tự sinh ra file pre-commit trong .husky chứa thông tin về lệnh đó. 

Có thể setup thủ công: nếu đã có file pre-commit thì chỉ cần sửa file đó. Nếu chưa thì tạo mới bằng cách sử dụng mẫu trong file ẩn .git với "cp .git/hooks/pre-commit.sample .git/hooks/pre-commit" -> 2 dòng cuối sửa thành:
set -e
npm run eslint
# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
=> VD lệnh format là npm run eslint mới vậy, có thể viết bất cứ lệnh nào muốn chạy vào. Có thể thêm exit 1 vào cuối file pre-commit của husky để nó luôn fail nếu chỉ muốn test

Để đảm bảo mọi thứ tự động khi người mới vào dự án thì thêm script trong package.json: "postinstall": "husky install" và "prepare": "husky install"
Bh add r commit -> husky bắt được -> gọi lint-staged -> tự thực hiện prettier và eslint -> xong.

Thật ra, npx husky install sẽ cài husky và tự thêm "prepare": "husky install" trong package.json và tạo ra thư mục .husky và có sẵn pre-commit tự chạy npm test.
Có thể dùng mọi loại hook trong git/hooks chứ k chỉ pre-commit với husky. VD: npx husky add .husky/pre-receive 'echo "pre-received"' => để dùng hook pre-receive
VD: Hook commit-msg tương tự tool commitlint



# Commitlint
Tool đảm bảo commit message phải chuẩn
-> Setup: npm install --save-dev @commitlint/config-conventional @commitlint/cli -> config-conventional là cấu hình commit dựa theo chuẩn commit của Angular 
Setup husky bắt commit message: npx husky add .husky/commit-msg "" -> hiện file .husky/commit-msg -> mở file đó ra và sửa undefined thành: npx --no-install commitlint --edit "$1" => tự chạy commitlint check commit message với husky
-> tức là lấy commit message của cái commit gần nhất. Tạo file .commitlintrc.js -> bên trong viết: module.exports = {extends: ['@commitlint/config-conventional']}; or trong package.json dùng: 
"commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
=> Để commit buộc phải theo chuẩn message là: type(scope?): subject với:
type ở trên có thể là:
build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
ci: Changes to our CI configuration files and scripts (example scopes: Gitlab CI, Circle, BrowserStack, SauceLabs)
chore: add something without touching production code (Eg: update npm dependencies)
docs: Documentation only changes
feat: A new feature
fix: A bug fix
perf: A code change that improves performance
refactor: A code change that neither fixes a bug nor adds a feature
revert: Reverts a previous commit
style: Changes that do not affect the meaning of the code (Eg: adding white-space, formatting, missing semi-colons, etc)
test: Adding missing tests or correcting existing tests
scope (optional) nếu có thì nó nên là tên của package mà commit hiện tại làm ảnh hưởng. Scope thường dùng ở các repo mà chứa nhiều packages dạng monorepo.
subject là nội dung của commit

Có thể thêm các chuẩn riêng của ta vào commit lint.
Husky có thể k check được nếu thêm option --no-verify, VD: git commit -m "test dummy message" --no-verify -> vẫn commit như thg kể cả commitLint => có thể fix với CICD gitlab.

-> Thực tế commitlint có thể thay thế bằng git hooks là commit-msg. hook này cho phép ta check message commit có theo chuẩn k do ta tự custom. Nhưng người ta vẫn dùng commitlint vì cấu hình file commit-msg cho husky phức tạp: npx husky add .husky/commit-msg 'echo "pre-received"' -> cấu hình file commit-msg là xong



# Other
-> Tổng quan
- *eslint: viết file config đặt ra tiêu chuẩn, thêm lệnh vào package.json để chạy. (Cài extension và setting để tự động fix khi save)
- *prettier: cài locally làm command trong package.json khi chạy lệnh lint-staged thì chạy luôn prettier. Cài eslint-config-prettier và eslint-plugin-prettier và thêm rules vào config của eslint để đồng bộ. Dùng npx prettier --write . để format bằng command
- *lint-staged: cài package và chỉnh lệnh trong package.json dùng prettier và eslint như nào khi file đạt trạng thái staged chứ kp check với tất cả các file như bth
- *husky: cài package -> setup tự động cài husky trong package.json -> khởi chạy dự án với husky -> thêm vào muốn chạy lệnh gì trước khi commit với tool pre-commit
- *pre-commit của git husky: chỉnh file pre-commit và tự động chạy lệnh khi commit lên. Có thể dùng command để set up file pre-commit
- *Commitlint: cài package -> setup husky bắt commit dùng cho commitlint -> sửa lệnh trong package.json -> thao tác bth
- commitizen: cài commitizen -> setup command nó dùng conventional nào -> dùng lệnh git cz luôn -> chọn loại commit -> scope gõ commitizen -> viết description cho commit -> body có thể k có -> No breaking change -> No open issues

-> Setup nhanh mọi tools cơ bản:
-> npx eslint --init
-> npm i --save-dev prettier eslint-config-prettier eslint-plugin-prettier lint-staged husky @commitlint/config-conventional  @commitlint/cli
-> sửa file .eslintrc.js thành:
module.exports = {
    env: {
        browser: true,
        es2021: true,
        node: true,
    },
    extends: ["eslint:recommended", "plugin:react/recommended", "prettier"],
    parserOptions: {
        ecmaFeatures: {
            jsx: true,
        },
        ecmaVersion: "latest",
        sourceType: "module",
    },
    plugins: ["react", "prettier"],
    settings: {
        react: {
            version: "detect",
        },
    },
    rules: {
        // "linebreak-style": ["error", process.platform === "win32" ? "windows" : "unix"],
        "linebreak-style": 0,
        quotes: ["error", "double"],
        semi: ["error", "always"],
        "no-unused-vars": [
            "warn",
            {
                vars: "all",
                varsIgnorePattern: "^_$", 
                argsIgnorePattern: "^_$", 
                ignoreRestSiblings: true, 
            },
        ],
        "no-console": "off", 
        "no-prototype-builtins": "off",
        "no-empty": "warn", 
        "react/prop-types": "off",
        "prettier/prettier": ["warn"],
    },
};
-> sửa file .prettierrc thành:
{
    "printWidth": 120,
    "singleQuote": false,
    "tabWidth": 4,
    "semi": true,
    "trailingComma": "es5"
}
-> sửa jsconfig.json thành:
{
    "compilerOptions": {
        "baseUrl": "."
    },
    "include": ["src"]
}
-> sửa .commitlintrc.js thành:
module.exports = { 
    extends: ["@commitlint/config-conventional"] 
};
-> thêm vào package.json:
 "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "lint:staged": "lint-staged",
    "postinstall": "husky install",
    "prepare": "husky install"
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --fix",
      "git add ."
    ],
    "*.{ts,js,jsx,ts,tsx,json,yml,md}": [
      "prettier --write",
      "git add ."
    ]
  },
-> npx husky install -> npx husky add .husky/pre-commit "yarn lint-staged" -> npx husky add .husky/commit-msg "" -> sửa commit-msg của husky từ undefined thành: npx --no-install commitlint --edit "$1"
=> Dùng thêm format on save nếu k sợ lag với prettier extension

-> thêm .prettierignore:
**/*.svg
package.json
/dist
/build
.dockerignore
.DS_Store
.eslintignore
*.png
*.toml
docker
.editorconfig
Dockerfile*
.gitignore
.prettierignore
LICENSE
.eslintcache
*.lock
yarn-error.log
.history
CNAME

-> thêm .eslintignore:
/build/**
!.eslintrc.js

-> thêm .gitignore:
# dependencies
/node_modules
/.pnp
.pnp.js
# testing
/coverage
# production
/build
# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
npm-debug.log*
yarn-debug.log*
yarn-error.log*
/.vscode

-> Tool khác: stylelint + stylelint-config-recommended => tool này k cần thiết trong các dự án mà k chú trọng cho style file css
Cách dùng: npm i styleint stylelint-config-recommended -> thêm vào package.json: "stylelint:check": "stylelint \"src/**/*.css\"" -> tạo .stylelintrc.json và thêm style -> mỗi khi dùng thì npm run stylelint:check -> nếu muốn tự động với pre-commit thì thêm vào package.json:
"husky": {
    "hooks": {
      "pre-commit": "stylelint:check"
    }
}
Tương tự có tslint format typescript

